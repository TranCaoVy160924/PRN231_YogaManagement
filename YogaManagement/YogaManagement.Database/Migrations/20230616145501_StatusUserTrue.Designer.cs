// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YogaManagement.Database.EF;

#nullable disable

namespace YogaManagement.Database.Migrations
{
    [DbContext(typeof(YogaManagementDbContext))]
    [Migration("20230616145501_StatusUserTrue")]
    partial class StatusUserTrue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 31,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 32,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 33,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 34,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 35,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 36,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 37,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 38,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 39,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 40,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 41,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 42,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 43,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 44,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 45,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 46,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeacherProfileTimeSlot", b =>
                {
                    b.Property<int>("AvailableSlotId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableTeacherId")
                        .HasColumnType("int");

                    b.HasKey("AvailableSlotId", "AvailableTeacherId");

                    b.HasIndex("AvailableTeacherId");

                    b.ToTable("TeacherProfileTimeSlot");
                });

            modelBuilder.Entity("TimeSlotYogaClass", b =>
                {
                    b.Property<int>("TimeSlotsId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassesId")
                        .HasColumnType("int");

                    b.HasKey("TimeSlotsId", "YogaClassesId");

                    b.HasIndex("YogaClassesId");

                    b.ToTable("TimeSlotYogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "MEMBER",
                            Name = "Member",
                            NormalizedName = "member"
                        },
                        new
                        {
                            Id = 2,
                            Description = "TEACHER",
                            Name = "Teacher",
                            NormalizedName = "teacher"
                        },
                        new
                        {
                            Id = 3,
                            Description = "STAFF",
                            Name = "Staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = 4,
                            Description = "ADMIN",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "63b067fe-5a79-4f33-844f-ac4681d37c13",
                            Email = "member1@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name1",
                            Lastname = "LastName1",
                            LockoutEnabled = false,
                            NormalizedEmail = "member1@gmail.com",
                            NormalizedUserName = "usermember1",
                            PasswordHash = "AQAAAAIAAYagAAAAEGUI2oKYfoXY1buknYzqPEDWNfdwTioxFswRiMJm5AbEJosQnjUBzxK32jM+AVN2KQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ce80386a-a518-4fdb-ad79-9f88e3fa66dd",
                            Email = "member2@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name2",
                            Lastname = "LastName2",
                            LockoutEnabled = false,
                            NormalizedEmail = "member2@gmail.com",
                            NormalizedUserName = "usermember2",
                            PasswordHash = "AQAAAAIAAYagAAAAEGHQzsyXtGZy0+6z/6eKdrao2KhE5tr8U3Amy1FllntNRWNek7Qejc54Q5Sjedmifw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "82dae3d0-0b24-4dd6-b266-82937deea64c",
                            Email = "member3@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name3",
                            Lastname = "LastName3",
                            LockoutEnabled = false,
                            NormalizedEmail = "member3@gmail.com",
                            NormalizedUserName = "usermember3",
                            PasswordHash = "AQAAAAIAAYagAAAAEEWdexA5ySh8iEbZWJ1+70VpRD03fmtaZTr45XuUx6FS1J8F/KRVomUmfqnRqSNfkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "2f116fcf-ba2d-4c6f-8406-4174413b5010",
                            Email = "member4@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name4",
                            Lastname = "LastName4",
                            LockoutEnabled = false,
                            NormalizedEmail = "member4@gmail.com",
                            NormalizedUserName = "usermember4",
                            PasswordHash = "AQAAAAIAAYagAAAAEGAZhWkYNoqY+ESGntDUn1T62LjbPK/4RsUYX9rL4/H5y29zJFOvvf8shGfC7KPKdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "4b1822c8-c669-40ce-9195-99c6939e444b",
                            Email = "member5@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name5",
                            Lastname = "LastName5",
                            LockoutEnabled = false,
                            NormalizedEmail = "member5@gmail.com",
                            NormalizedUserName = "usermember5",
                            PasswordHash = "AQAAAAIAAYagAAAAEJOU6CuPcnpMwh8n2sjxiVrFq/Nf30KForlmfKMX70EOyOr7YDRzZ71EAEimzEEjPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "aa2f5da6-eaa0-4727-a2bd-ce8d1cf6b72d",
                            Email = "member6@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name6",
                            Lastname = "LastName6",
                            LockoutEnabled = false,
                            NormalizedEmail = "member6@gmail.com",
                            NormalizedUserName = "usermember6",
                            PasswordHash = "AQAAAAIAAYagAAAAEE09dOfo+vOkJL5aNReRDrOmKPfvnqOCi5XuNK13U9dx70WGbbn5ieJJGMFGncTQnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember6"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "dc4c8cb2-b04c-4019-b368-c6cf506b01b9",
                            Email = "member7@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name7",
                            Lastname = "LastName7",
                            LockoutEnabled = false,
                            NormalizedEmail = "member7@gmail.com",
                            NormalizedUserName = "usermember7",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ/rpcZYZPEpj6A1Uwa445A8yQBcsobWg+xOYYq9pK5duhpMxW7J0J6WhF4ewWTsaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "94639199-b5b9-4169-9583-87ff6bb87d88",
                            Email = "member8@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name8",
                            Lastname = "LastName8",
                            LockoutEnabled = false,
                            NormalizedEmail = "member8@gmail.com",
                            NormalizedUserName = "usermember8",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1Ijvn1L9+rp4eXJCrgbM8nkgRn+kTXVjN1kBqa4dVh1E6w5+a/FrzerAK0OTSKyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember8"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "f9dde32b-99ee-46ea-b6ee-b3fd7cbf5ae0",
                            Email = "member9@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name9",
                            Lastname = "LastName9",
                            LockoutEnabled = false,
                            NormalizedEmail = "member9@gmail.com",
                            NormalizedUserName = "usermember9",
                            PasswordHash = "AQAAAAIAAYagAAAAEI1ZDNbLfbNMu8xpbXjRnFN4M45m2xb8AOlrYXKV0iTL0daFRdJkCgARDePvUGcmAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember9"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "260db6e4-4df1-49d1-bf30-9862bc2c8871",
                            Email = "member10@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name10",
                            Lastname = "LastName10",
                            LockoutEnabled = false,
                            NormalizedEmail = "member10@gmail.com",
                            NormalizedUserName = "usermember10",
                            PasswordHash = "AQAAAAIAAYagAAAAEFWe/fFfglE46WN3uotSL1Vh+kansGHo+7K29U6s8fN7ElsxGD0TsPVyA9rh3YlXxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember10"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "dd7b73e2-fd5a-49cf-8958-e2aba49cc2ae",
                            Email = "member11@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name11",
                            Lastname = "LastName11",
                            LockoutEnabled = false,
                            NormalizedEmail = "member11@gmail.com",
                            NormalizedUserName = "usermember11",
                            PasswordHash = "AQAAAAIAAYagAAAAEEttcwDuvLNV7XZepxjedckLPsSMUadgJghKbOdiiN+VtQc3NWJGk6zP3eebozphwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember11"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "6c55e55b-6199-49dd-890c-36f37a3e1406",
                            Email = "member12@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name12",
                            Lastname = "LastName12",
                            LockoutEnabled = false,
                            NormalizedEmail = "member12@gmail.com",
                            NormalizedUserName = "usermember12",
                            PasswordHash = "AQAAAAIAAYagAAAAELykSS0T/wP57yMpHhkeIMBWVhJt7zngyJqL6Ygt5nN7nOBxGIUxasu7O6swG3g6gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember12"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "669e2250-d24b-4687-8bda-8ad655917e9e",
                            Email = "member13@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name13",
                            Lastname = "LastName13",
                            LockoutEnabled = false,
                            NormalizedEmail = "member13@gmail.com",
                            NormalizedUserName = "usermember13",
                            PasswordHash = "AQAAAAIAAYagAAAAEFrnZaiJ5QN4XNrJSYnfNvM32m7JeASvfGBrowd2+s1gL6tA8ehJVMVtGuFYv+ezTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember13"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "82c749c8-59d6-4026-8f7a-00a4798580dc",
                            Email = "member14@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name14",
                            Lastname = "LastName14",
                            LockoutEnabled = false,
                            NormalizedEmail = "member14@gmail.com",
                            NormalizedUserName = "usermember14",
                            PasswordHash = "AQAAAAIAAYagAAAAEDyYk6MZYo5cs5Zv8sdH0w/d5gu/8JipswAOl8TrIyF+SnaC6G7tqyonBanUZWCXhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember14"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "023dae61-9639-426b-955b-266169fffb69",
                            Email = "member15@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name15",
                            Lastname = "LastName15",
                            LockoutEnabled = false,
                            NormalizedEmail = "member15@gmail.com",
                            NormalizedUserName = "usermember15",
                            PasswordHash = "AQAAAAIAAYagAAAAEH5aDihXgecK+DGMOPCmwRLGmllSE1qkVoO7/96wqGx02bo8o/yJgG5QVRP0xPOW6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember15"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "4e450da4-c6cd-496f-bc53-365cb8c2597a",
                            Email = "member16@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name16",
                            Lastname = "LastName16",
                            LockoutEnabled = false,
                            NormalizedEmail = "member16@gmail.com",
                            NormalizedUserName = "usermember16",
                            PasswordHash = "AQAAAAIAAYagAAAAEPv+9ibRLMMMCD4ccj6fst9P6n/UiSfiSALtpQmXgl3AHEBVqpvDvgcPOfxRzXPxPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember16"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "23e65303-3759-4bfd-b623-de4e7a1366d1",
                            Email = "member17@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name17",
                            Lastname = "LastName17",
                            LockoutEnabled = false,
                            NormalizedEmail = "member17@gmail.com",
                            NormalizedUserName = "usermember17",
                            PasswordHash = "AQAAAAIAAYagAAAAENynWepouZxP16WYzvhDAUEYARqjDu+pnMH7ONSE/Uq17gvjMxqVC/XA3aCm0n06Vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember17"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "cc489d77-2ebc-4f1f-b9f0-b327a0e624d3",
                            Email = "member18@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name18",
                            Lastname = "LastName18",
                            LockoutEnabled = false,
                            NormalizedEmail = "member18@gmail.com",
                            NormalizedUserName = "usermember18",
                            PasswordHash = "AQAAAAIAAYagAAAAEOm16eeHUJEFDclkfFQ8XYI1eDOmlue+Ln1ZH5jGWF1vxK/QH8bjvWpWmoSMBL9Q3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember18"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "4a1d67d7-c36e-49a6-b02b-b5156a63e7ba",
                            Email = "member19@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name19",
                            Lastname = "LastName19",
                            LockoutEnabled = false,
                            NormalizedEmail = "member19@gmail.com",
                            NormalizedUserName = "usermember19",
                            PasswordHash = "AQAAAAIAAYagAAAAEN8zukWsMBZWc4txwiRgyGtkjeYM7OS5WT/TVO95X/51ILSZi11ss3mxOgZ/5m04mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember19"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "f2dd0742-49cf-4090-94c3-7936f81ee52d",
                            Email = "member20@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name20",
                            Lastname = "LastName20",
                            LockoutEnabled = false,
                            NormalizedEmail = "member20@gmail.com",
                            NormalizedUserName = "usermember20",
                            PasswordHash = "AQAAAAIAAYagAAAAEIPoCJcQ2XYdeBjUIBSmnEMFK7cEbTzjq3OOisrwcu+5QlxysqIWIsFIr4sls9zg/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember20"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "130b5dbe-da0e-4784-99e8-f84e70d97013",
                            Email = "member21@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name21",
                            Lastname = "LastName21",
                            LockoutEnabled = false,
                            NormalizedEmail = "member21@gmail.com",
                            NormalizedUserName = "usermember21",
                            PasswordHash = "AQAAAAIAAYagAAAAEBAZ0ALHJwgt/iwxSL4YdnUO4iVQEmBh/qsGDEShgKcuyI9r/usmEwJ2diqVvdICdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember21"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "5a863cf2-bd80-4aa0-bde5-063f9d2c3882",
                            Email = "member22@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name22",
                            Lastname = "LastName22",
                            LockoutEnabled = false,
                            NormalizedEmail = "member22@gmail.com",
                            NormalizedUserName = "usermember22",
                            PasswordHash = "AQAAAAIAAYagAAAAEF16g3uZncVZG2/d0joDYLzfZe+IcHvLGz26W08c/RwwA1u9S/EQQsClTL6ducKtCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember22"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "958b49cf-2c84-4ad4-9ef0-2945a0493585",
                            Email = "member23@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name23",
                            Lastname = "LastName23",
                            LockoutEnabled = false,
                            NormalizedEmail = "member23@gmail.com",
                            NormalizedUserName = "usermember23",
                            PasswordHash = "AQAAAAIAAYagAAAAEP39XDKUNlYLxxUHdgbMs91Nh5JAPEP2t+l8XpfO9KY+caJPfWqLS1UPY4pF6k8V7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember23"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "3f5995f2-695e-4cca-b3ab-31461a28cf2b",
                            Email = "member24@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name24",
                            Lastname = "LastName24",
                            LockoutEnabled = false,
                            NormalizedEmail = "member24@gmail.com",
                            NormalizedUserName = "usermember24",
                            PasswordHash = "AQAAAAIAAYagAAAAEGjoB4ATzLbi8Timgxot/UIkvwBsXJIYlSN465NjwD7USPDZ6F5oC0GuQgCpzRTI1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember24"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "631fb071-2af5-403d-af3b-2df5310ab57b",
                            Email = "member25@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name25",
                            Lastname = "LastName25",
                            LockoutEnabled = false,
                            NormalizedEmail = "member25@gmail.com",
                            NormalizedUserName = "usermember25",
                            PasswordHash = "AQAAAAIAAYagAAAAEC+MP/xfVTSUFTLdlyRJEtwEJpuamOZn9y2Vf4m8/E7hy5adFAeakK96Iv/jFYJ7BQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember25"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d563b773-0ad8-4e77-9830-f0c48d8bd56c",
                            Email = "member26@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name26",
                            Lastname = "LastName26",
                            LockoutEnabled = false,
                            NormalizedEmail = "member26@gmail.com",
                            NormalizedUserName = "usermember26",
                            PasswordHash = "AQAAAAIAAYagAAAAEN5oFiTfcmDHnjxohCAIH1Ba8/SsAierwzo3rm/0Sk0IikQrZ6vlVP9hpX5bFdZv5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember26"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "96e8b069-6bea-4eea-a043-8000d0985d11",
                            Email = "member27@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name27",
                            Lastname = "LastName27",
                            LockoutEnabled = false,
                            NormalizedEmail = "member27@gmail.com",
                            NormalizedUserName = "usermember27",
                            PasswordHash = "AQAAAAIAAYagAAAAEOx2Zk7nDUcBvCJwnnSDiKX4JHfR97jhik1ZeVI9lkT+HVto4qIgN3oDqtlPCTI7dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember27"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ec0e00c7-02a6-42e7-afbd-7e5420d04abc",
                            Email = "member28@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name28",
                            Lastname = "LastName28",
                            LockoutEnabled = false,
                            NormalizedEmail = "member28@gmail.com",
                            NormalizedUserName = "usermember28",
                            PasswordHash = "AQAAAAIAAYagAAAAEIlESKedreO6D6bfTp79LDhoZJYyLF+ji3JK7ARovHkhVL/kR4WWf1J6Hip4INnuRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember28"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "61598f7a-c6b5-4b8c-a4fa-844036508519",
                            Email = "member29@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name29",
                            Lastname = "LastName29",
                            LockoutEnabled = false,
                            NormalizedEmail = "member29@gmail.com",
                            NormalizedUserName = "usermember29",
                            PasswordHash = "AQAAAAIAAYagAAAAEFTczUsju/jcSVdbPkcgvchDU6r+M7sxcL0hsdKaVB5PGhS0eTmY2YrOMk3vwusraQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember29"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "2f2408d6-1792-4081-a623-89dc81ee8ea7",
                            Email = "member30@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name30",
                            Lastname = "LastName30",
                            LockoutEnabled = false,
                            NormalizedEmail = "member30@gmail.com",
                            NormalizedUserName = "usermember30",
                            PasswordHash = "AQAAAAIAAYagAAAAEDjmbjd/SMwZxa8Mp9hcU5mAFy/pHWg3ZI6qndlCpVWA4CLt6Uvc6tGGp6ibdA+25A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember30"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "03e12be1-7837-40fe-9ba6-4d2f848eb380",
                            Email = "teacher31@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name31",
                            Lastname = "LastName31",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher31@gmail.com",
                            NormalizedUserName = "userteacher31",
                            PasswordHash = "AQAAAAIAAYagAAAAEOp22LKQuvgAOqHJalJGCID9D0e5BmYGa6oBZiQJqDkMxv9mQx8TIw7P7h5oNv0b0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher31"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "7320a8be-0e3e-4fff-9239-95e273cb7608",
                            Email = "teacher32@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name32",
                            Lastname = "LastName32",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher32@gmail.com",
                            NormalizedUserName = "userteacher32",
                            PasswordHash = "AQAAAAIAAYagAAAAEPjZtuyyHvSXGYIPYs5Lz7Mr3+FSQtG1VGRe6HcTeZuReFucsr173Few5BI5zTPDpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher32"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d7146bdf-752b-4b56-8419-3aaad931d156",
                            Email = "teacher33@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name33",
                            Lastname = "LastName33",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher33@gmail.com",
                            NormalizedUserName = "userteacher33",
                            PasswordHash = "AQAAAAIAAYagAAAAEIY0BfEVYfLANVPNhX/kVDrekYSqYbmRps73AlMud5I/3aHlpm4abGigRkRiZE6XKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher33"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d3d252a2-1b1b-4cdc-84d1-ca669c91da98",
                            Email = "teacher34@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name34",
                            Lastname = "LastName34",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher34@gmail.com",
                            NormalizedUserName = "userteacher34",
                            PasswordHash = "AQAAAAIAAYagAAAAEE/5sfZerLuc7jWnJE4RkaAKuHFurU6Hs1g57agGoLnKrXCRRzyC/zC61BtiWBsz8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher34"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "0e7eeca1-2b17-4057-a5cf-687dcd336093",
                            Email = "teacher35@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name35",
                            Lastname = "LastName35",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher35@gmail.com",
                            NormalizedUserName = "userteacher35",
                            PasswordHash = "AQAAAAIAAYagAAAAEICZqvd0qlDu5qPHDCwQGqxvfFijyriTHpI6MLAPYqGOflKiN1mZJirE8Xd/iqDQjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher35"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "bed93659-29af-4976-a513-cff94f02bb85",
                            Email = "teacher36@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name36",
                            Lastname = "LastName36",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher36@gmail.com",
                            NormalizedUserName = "userteacher36",
                            PasswordHash = "AQAAAAIAAYagAAAAEAXT6300qUUvRUWrHGbmfx6iaweqjtazEoYJgBcM3IzuX0VQYxOM6fyrNSF7cwFLsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher36"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "884c64c8-844e-4cdc-b141-d58257ded138",
                            Email = "teacher37@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name37",
                            Lastname = "LastName37",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher37@gmail.com",
                            NormalizedUserName = "userteacher37",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWIFhOrcVmgmKadMeXpYnu2ySB3fzkxo9MuNrPvHBXqX0PbyoKsLF88KBuDQ/Um6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher37"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "0b39b6bb-1ac9-4f60-9376-fa48b83469a2",
                            Email = "teacher38@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name38",
                            Lastname = "LastName38",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher38@gmail.com",
                            NormalizedUserName = "userteacher38",
                            PasswordHash = "AQAAAAIAAYagAAAAEBfaYhpMhs4Gno9xxMyULSOtHvdG8upxvfxMl33cT2l32D2OfXvH17AuvmisdRHQ/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher38"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "f4d55b5d-26df-4c53-8e21-3649b2532104",
                            Email = "teacher39@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name39",
                            Lastname = "LastName39",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher39@gmail.com",
                            NormalizedUserName = "userteacher39",
                            PasswordHash = "AQAAAAIAAYagAAAAEHvALaNhbSx4JLyzhQZSf/YjhgZffSUUIIFPSISC7quB9AV5nc8jLtREPYtUqps5OA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher39"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d65bd14f-33a7-4ae3-8ed1-2a3aea1fb813",
                            Email = "teacher40@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name40",
                            Lastname = "LastName40",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher40@gmail.com",
                            NormalizedUserName = "userteacher40",
                            PasswordHash = "AQAAAAIAAYagAAAAEMn0WEj+AQPjNYXa9FCAoTecvK9g7Uykw194wKBqmBJQUwf+v7QXmr7PHlvclZRt+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher40"
                        },
                        new
                        {
                            Id = 41,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ed2ced81-c05a-4b81-9561-f6d4d9c31c68",
                            Email = "staff41@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name41",
                            Lastname = "LastName41",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff41@gmail.com",
                            NormalizedUserName = "userstaff41",
                            PasswordHash = "AQAAAAIAAYagAAAAEOB8T57vamW2feQV7Ndl/ScTCBqThq45026n2hOHKmRq9QKUGe4LmP1AaVHkkEFduA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff41"
                        },
                        new
                        {
                            Id = 42,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "3e44d4b7-87c4-45a5-88fa-a85eac44f6cd",
                            Email = "staff42@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name42",
                            Lastname = "LastName42",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff42@gmail.com",
                            NormalizedUserName = "userstaff42",
                            PasswordHash = "AQAAAAIAAYagAAAAEMVaCy03tvJz6C5/maWGuulfydJbNMZnsD3f75T66hIfQSN3/0uNmtuGRVjPlpv+wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff42"
                        },
                        new
                        {
                            Id = 43,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ddef52cd-d095-4fb6-b794-cc2c3ee1143b",
                            Email = "staff43@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name43",
                            Lastname = "LastName43",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff43@gmail.com",
                            NormalizedUserName = "userstaff43",
                            PasswordHash = "AQAAAAIAAYagAAAAECgjx8vyPt1ytdXaeFVH1S/Qlkb9toxH3vQJELuLqI1EkevfUfJoZoVe/mvX4GE1fA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff43"
                        },
                        new
                        {
                            Id = 44,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "a329be4c-9863-495b-8779-37428fbabbf6",
                            Email = "staff44@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name44",
                            Lastname = "LastName44",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff44@gmail.com",
                            NormalizedUserName = "userstaff44",
                            PasswordHash = "AQAAAAIAAYagAAAAEO//bx3hoWdTZRre2ttf96oO0NVsOTnkeYD42zRGqeaN9rgWPSFTkF/PUnK5zXaIKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff44"
                        },
                        new
                        {
                            Id = 45,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d8a9438e-e4b1-4d9c-8685-465016d79362",
                            Email = "staff45@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name45",
                            Lastname = "LastName45",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff45@gmail.com",
                            NormalizedUserName = "userstaff45",
                            PasswordHash = "AQAAAAIAAYagAAAAEFbPTmovCB6OtfIJXL7wL9UGIQJj9hwfCXB+CiSNbVLRL81CzMzcXH/WTWoJZc/Sgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff45"
                        },
                        new
                        {
                            Id = 46,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "0763cd95-0f36-41ba-9e54-8676c35339aa",
                            Email = "admin46@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name46",
                            Lastname = "LastName46",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin46@gmail.com",
                            NormalizedUserName = "useradmin46",
                            PasswordHash = "AQAAAAIAAYagAAAAEISqktXw9sXNSwy89Q61wGOFy7iiqVyHCQUezBZK4KWV2pkqwIgUI9V+uzVa6uvVKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserAdmin46"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Category1"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Category2"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Category3"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Category4"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Category5"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Name = "Category6"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Name = "Category7"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            Name = "Category8"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            Name = "Category9"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            Name = "Category10"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnddDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Yoga course number 1",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course1",
                            Price = 100.0,
                            StartDate = new DateTime(2023, 6, 16, 21, 55, 1, 166, DateTimeKind.Local).AddTicks(6804)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Yoga course number 2",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course2",
                            Price = 200.0,
                            StartDate = new DateTime(2023, 6, 16, 21, 55, 1, 166, DateTimeKind.Local).AddTicks(6824)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Yoga course number 3",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course3",
                            Price = 300.0,
                            StartDate = new DateTime(2023, 6, 16, 21, 55, 1, 166, DateTimeKind.Local).AddTicks(6828)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Yoga course number 4",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course4",
                            Price = 400.0,
                            StartDate = new DateTime(2023, 6, 16, 21, 55, 1, 166, DateTimeKind.Local).AddTicks(6831)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Description = "Yoga course number 5",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course5",
                            Price = 500.0,
                            StartDate = new DateTime(2023, 6, 16, 21, 55, 1, 166, DateTimeKind.Local).AddTicks(6834)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Description = "Yoga course number 6",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course6",
                            Price = 600.0,
                            StartDate = new DateTime(2023, 6, 16, 21, 55, 1, 166, DateTimeKind.Local).AddTicks(6838)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Description = "Yoga course number 7",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course7",
                            Price = 700.0,
                            StartDate = new DateTime(2023, 6, 16, 21, 55, 1, 166, DateTimeKind.Local).AddTicks(6841)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            Description = "Yoga course number 8",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course8",
                            Price = 800.0,
                            StartDate = new DateTime(2023, 6, 16, 21, 55, 1, 166, DateTimeKind.Local).AddTicks(6844)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Description = "Yoga course number 9",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course9",
                            Price = 900.0,
                            StartDate = new DateTime(2023, 6, 16, 21, 55, 1, 166, DateTimeKind.Local).AddTicks(6848)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            Description = "Yoga course number 10",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course10",
                            Price = 1000.0,
                            StartDate = new DateTime(2023, 6, 16, 21, 55, 1, 166, DateTimeKind.Local).AddTicks(6852)
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Enrollment", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "YogaClassId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 5
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 6
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 7
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 8
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 9
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 10
                        },
                        new
                        {
                            Id = 11,
                            AppUserId = 11
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 12
                        },
                        new
                        {
                            Id = 13,
                            AppUserId = 13
                        },
                        new
                        {
                            Id = 14,
                            AppUserId = 14
                        },
                        new
                        {
                            Id = 15,
                            AppUserId = 15
                        },
                        new
                        {
                            Id = 16,
                            AppUserId = 16
                        },
                        new
                        {
                            Id = 17,
                            AppUserId = 17
                        },
                        new
                        {
                            Id = 18,
                            AppUserId = 18
                        },
                        new
                        {
                            Id = 19,
                            AppUserId = 19
                        },
                        new
                        {
                            Id = 20,
                            AppUserId = 20
                        },
                        new
                        {
                            Id = 21,
                            AppUserId = 21
                        },
                        new
                        {
                            Id = 22,
                            AppUserId = 22
                        },
                        new
                        {
                            Id = 23,
                            AppUserId = 23
                        },
                        new
                        {
                            Id = 24,
                            AppUserId = 24
                        },
                        new
                        {
                            Id = 25,
                            AppUserId = 25
                        },
                        new
                        {
                            Id = 26,
                            AppUserId = 26
                        },
                        new
                        {
                            Id = 27,
                            AppUserId = 27
                        },
                        new
                        {
                            Id = 28,
                            AppUserId = 28
                        },
                        new
                        {
                            Id = 29,
                            AppUserId = 29
                        },
                        new
                        {
                            Id = 30,
                            AppUserId = 30
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.SystemWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemWallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherProfileId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherProfileId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("TeacherEnrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("TeacherProfiles");

                    b.HasData(
                        new
                        {
                            Id = 31,
                            AppUserId = 31
                        },
                        new
                        {
                            Id = 32,
                            AppUserId = 32
                        },
                        new
                        {
                            Id = 33,
                            AppUserId = 33
                        },
                        new
                        {
                            Id = 34,
                            AppUserId = 34
                        },
                        new
                        {
                            Id = 35,
                            AppUserId = 35
                        },
                        new
                        {
                            Id = 36,
                            AppUserId = 36
                        },
                        new
                        {
                            Id = 37,
                            AppUserId = 37
                        },
                        new
                        {
                            Id = 38,
                            AppUserId = 38
                        },
                        new
                        {
                            Id = 39,
                            AppUserId = 39
                        },
                        new
                        {
                            Id = 40,
                            AppUserId = 40
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Room")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("YogaClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Name = "Class1",
                            Size = 19,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Name = "Class2",
                            Size = 18,
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Name = "Class3",
                            Size = 17,
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            Name = "Class4",
                            Size = 16,
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            Name = "Class5",
                            Size = 15,
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            Name = "Class6",
                            Size = 14,
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            Name = "Class7",
                            Size = 13,
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            Name = "Class8",
                            Size = 12,
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            Name = "Class9",
                            Size = 11,
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            Name = "Class10",
                            Size = 10,
                            Status = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherProfileTimeSlot", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("AvailableSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", null)
                        .WithMany()
                        .HasForeignKey("AvailableTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlotYogaClass", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("TimeSlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", null)
                        .WithMany()
                        .HasForeignKey("YogaClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Enrollment", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Member", "Member")
                        .WithMany("Enrollments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("Enrollments")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("Member")
                        .HasForeignKey("YogaManagement.Domain.Models.Member", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherEnrollment", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", "TeacherProfile")
                        .WithMany("TeacherEnrollments")
                        .HasForeignKey("TeacherProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("TeacherEnrollments")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherProfile");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("TeacherProfile")
                        .HasForeignKey("YogaManagement.Domain.Models.TeacherProfile", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Transaction", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Member", "Member")
                        .WithOne("Wallet")
                        .HasForeignKey("YogaManagement.Domain.Models.Wallet", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Course", "Course")
                        .WithMany("YogaClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppUser", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("TeacherProfile");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.Navigation("YogaClasses");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.Navigation("TeacherEnrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("TeacherEnrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
