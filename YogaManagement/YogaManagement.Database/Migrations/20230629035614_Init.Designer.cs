// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YogaManagement.Database.EF;

#nullable disable

namespace YogaManagement.Database.Migrations
{
    [DbContext(typeof(YogaManagementDbContext))]
    [Migration("20230629035614_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 31,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 32,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 33,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 34,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 35,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 36,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 37,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 38,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 39,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 40,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 41,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 42,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 43,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 44,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 45,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 46,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeacherProfileTimeSlot", b =>
                {
                    b.Property<int>("AvailableSlotId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableTeacherId")
                        .HasColumnType("int");

                    b.HasKey("AvailableSlotId", "AvailableTeacherId");

                    b.HasIndex("AvailableTeacherId");

                    b.ToTable("TeacherProfileTimeSlot");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "MEMBER",
                            Name = "Member",
                            NormalizedName = "member"
                        },
                        new
                        {
                            Id = 2,
                            Description = "TEACHER",
                            Name = "Teacher",
                            NormalizedName = "teacher"
                        },
                        new
                        {
                            Id = 3,
                            Description = "STAFF",
                            Name = "Staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = 4,
                            Description = "ADMIN",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "a5a76ad6-c4a4-4697-8ad4-08fb54c6facc",
                            Email = "member1@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name1",
                            Lastname = "LastName1",
                            LockoutEnabled = false,
                            NormalizedEmail = "member1@gmail.com",
                            NormalizedUserName = "member1@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEJMj+jj3BoLG1C2bBCVzlVrG5NzpcDjheXk4BTOOdDQMEksaeSUs+T+RKmwEyF4cJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member1@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "fa6cbbea-91ce-439d-ad7b-80e72c0a59ef",
                            Email = "member2@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name2",
                            Lastname = "LastName2",
                            LockoutEnabled = false,
                            NormalizedEmail = "member2@gmail.com",
                            NormalizedUserName = "member2@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEANngFQ5JTVdMv7jHAUvkwKlmRAwUivJmXS6/q3GTMGg3q7s9ZcANnYTe+QSmPEgeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member2@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "96cfd296-1f56-45a0-8c21-deeaf4db1d6e",
                            Email = "member3@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name3",
                            Lastname = "LastName3",
                            LockoutEnabled = false,
                            NormalizedEmail = "member3@gmail.com",
                            NormalizedUserName = "member3@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKorHL0X84PZrSOs65uJ/8KQ2IFP82rixrozvb1QzlJ+i4HdVr8ozRKBLM82SaGxng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member3@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "5821193c-a326-469d-8289-2ae44b4e1b8a",
                            Email = "member4@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name4",
                            Lastname = "LastName4",
                            LockoutEnabled = false,
                            NormalizedEmail = "member4@gmail.com",
                            NormalizedUserName = "member4@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEGzXXA9dS8CsG/B2F5owpOFOHdHxW8TpxRGhWN6YIqzQId8BqFnNoD8IYMqShq0jAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member4@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d7697ed6-ef94-4cad-8c0e-7c1d33a07b5f",
                            Email = "member5@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name5",
                            Lastname = "LastName5",
                            LockoutEnabled = false,
                            NormalizedEmail = "member5@gmail.com",
                            NormalizedUserName = "member5@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDJZAN74adweyG5VsEZK+hg4hmFfB+Jhj/NWksn/52ZwPDYiRDFk7lkVLt2zEO1USQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member5@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d471050b-8c92-4782-ab08-85fcdb2514ec",
                            Email = "member6@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name6",
                            Lastname = "LastName6",
                            LockoutEnabled = false,
                            NormalizedEmail = "member6@gmail.com",
                            NormalizedUserName = "member6@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDybM6Bj8OewoRWIFLJQ+9Aya3Vo4+Exxzg3MBiSqkDCWTODpc3j2eah3LH2aH7gAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member6@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "0a662518-e1c2-4e3e-9de8-e9fe0e789812",
                            Email = "member7@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name7",
                            Lastname = "LastName7",
                            LockoutEnabled = false,
                            NormalizedEmail = "member7@gmail.com",
                            NormalizedUserName = "member7@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEB7/VjAby/tvPiIwOYnb+ThAkKk+3OSSdeBn5uY0PJ6qWwMTj86mhj9eAQBcwzerxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member7@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "6ed6dc2a-fdcb-43b3-9410-ebbb84a1c89d",
                            Email = "member8@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name8",
                            Lastname = "LastName8",
                            LockoutEnabled = false,
                            NormalizedEmail = "member8@gmail.com",
                            NormalizedUserName = "member8@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKN87RF1HR7/mfMvSc2ntjQW12dN44Wx/nMAH5Xv6xu9xgK39tdI8Czzfr013KDiGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member8@gmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "1777b4a2-1041-4930-b5e8-086d8c0d2a5e",
                            Email = "member9@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name9",
                            Lastname = "LastName9",
                            LockoutEnabled = false,
                            NormalizedEmail = "member9@gmail.com",
                            NormalizedUserName = "member9@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBmtmETC8RSZ/4g9xujklqVeBZL72aEWejj+asDBEwxwbEM6y0DWs75a763S4zsfYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member9@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e8bb8a9a-d901-469d-bd98-2ffd95afe509",
                            Email = "member10@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name10",
                            Lastname = "LastName10",
                            LockoutEnabled = false,
                            NormalizedEmail = "member10@gmail.com",
                            NormalizedUserName = "member10@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEHU1WPI+fBP1kwThXpsqjStul96iLNfC8iFHd+vfPRm9sZad/uVTFNomL56SXZOFwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member10@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "73548848-4f95-4b40-b3d4-ac407c41abba",
                            Email = "member11@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name11",
                            Lastname = "LastName11",
                            LockoutEnabled = false,
                            NormalizedEmail = "member11@gmail.com",
                            NormalizedUserName = "member11@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEOkaSrZI1+BJ2cARO5zUBDFNvZSe8HIWfsjDUU3ImS14qeju8DhjRNFnH/45Tjlvyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member11@gmail.com"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "8500a2b7-9443-4aec-9939-8113ac2391a1",
                            Email = "member12@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name12",
                            Lastname = "LastName12",
                            LockoutEnabled = false,
                            NormalizedEmail = "member12@gmail.com",
                            NormalizedUserName = "member12@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIt+soYz/riiDhYxl8XEUYxrQlu5NQpvimqnCfo1IjLZ9vgXJNBuke1gM7lg7NVNng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member12@gmail.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "0c7a7fc8-e5a2-48e7-b381-b14a79a92b69",
                            Email = "member13@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name13",
                            Lastname = "LastName13",
                            LockoutEnabled = false,
                            NormalizedEmail = "member13@gmail.com",
                            NormalizedUserName = "member13@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEONRmWSH0b2SbnMl2SMY9EioD836kSC+NGqBgqGue5PFRma2NiKAxZCR77eTtTBmRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member13@gmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "18eb17b9-cf2f-4af5-9518-02a4e94f73e8",
                            Email = "member14@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name14",
                            Lastname = "LastName14",
                            LockoutEnabled = false,
                            NormalizedEmail = "member14@gmail.com",
                            NormalizedUserName = "member14@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEFZueWlLVgvzRX19EFYjqPN2YeafBo2aG+CEZFrPWTTtkNiV2sGgTcVLUh9XmVHpRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member14@gmail.com"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d67a8ca2-a4fb-4775-9d5d-e8532681463c",
                            Email = "member15@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name15",
                            Lastname = "LastName15",
                            LockoutEnabled = false,
                            NormalizedEmail = "member15@gmail.com",
                            NormalizedUserName = "member15@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECygqY7DyEVlAFHcBOZQg0tArTokgitjSDZfw789ob1xdqKufeOYG3i8KkwXKUw8kA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member15@gmail.com"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ee995934-6046-4219-b3a7-9da2c23693db",
                            Email = "member16@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name16",
                            Lastname = "LastName16",
                            LockoutEnabled = false,
                            NormalizedEmail = "member16@gmail.com",
                            NormalizedUserName = "member16@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWLRtlFWo1S/lcjmGRZO5QST6betE+5QiHF1SzUvJ59+7sspSDGReJVlQbCqYOkRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member16@gmail.com"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "36c19868-d639-4d87-a145-b5d4476023a7",
                            Email = "member17@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name17",
                            Lastname = "LastName17",
                            LockoutEnabled = false,
                            NormalizedEmail = "member17@gmail.com",
                            NormalizedUserName = "member17@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEE5vj0udMIFZ4K4EhA8v9kOpiDIEZmN0aqLXeRWh2xMCNrzl3Dmkb2PLVMjzYm9gTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member17@gmail.com"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "a4f30e34-828b-4327-84c8-ca88709928a7",
                            Email = "member18@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name18",
                            Lastname = "LastName18",
                            LockoutEnabled = false,
                            NormalizedEmail = "member18@gmail.com",
                            NormalizedUserName = "member18@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBnA2KJDmYMlrGo73give/72TVQrjbOfD8kGor9TKx+Dz+QCaLrTTnqKdM/wcjSvNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member18@gmail.com"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "11f19db8-d4b5-43c9-af4d-e7e5107c1c0d",
                            Email = "member19@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name19",
                            Lastname = "LastName19",
                            LockoutEnabled = false,
                            NormalizedEmail = "member19@gmail.com",
                            NormalizedUserName = "member19@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELTKo1dDJWMB1+FBpxhJBXNViQMRuwmfxU50CgXOR2epL4tyWQtGN7IAjdATrCy6mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member19@gmail.com"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "3bb2130b-1bc6-4cc1-91c5-3f7bfc483b2d",
                            Email = "member20@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name20",
                            Lastname = "LastName20",
                            LockoutEnabled = false,
                            NormalizedEmail = "member20@gmail.com",
                            NormalizedUserName = "member20@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBDv8Y0x+lHjGnCpp60vXRd7AXbfKESFsWESIAZOg1vhsYUGiuRo7ZYMeMJ1VjaqMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member20@gmail.com"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "b5f3be7c-103b-4907-b17e-eb28761fe88a",
                            Email = "member21@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name21",
                            Lastname = "LastName21",
                            LockoutEnabled = false,
                            NormalizedEmail = "member21@gmail.com",
                            NormalizedUserName = "member21@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECBvzJE0OTGHRUkztN4y7HoTGj6sKryP7qclM6AfWfRGETRogbGZ9xp9+1N1mPh8lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member21@gmail.com"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "557395d6-5463-48f5-821a-1f27291adc8f",
                            Email = "member22@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name22",
                            Lastname = "LastName22",
                            LockoutEnabled = false,
                            NormalizedEmail = "member22@gmail.com",
                            NormalizedUserName = "member22@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEEfjWBn5arRTST0/4Ga3aDfEo7hgeGoIMqMrcGm/2DBdaYmWpgc5ukDs2knB/U8xXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member22@gmail.com"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "f3c4b940-2701-440f-a037-bf97781fb591",
                            Email = "member23@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name23",
                            Lastname = "LastName23",
                            LockoutEnabled = false,
                            NormalizedEmail = "member23@gmail.com",
                            NormalizedUserName = "member23@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEFx8VN+y057kmQPtxiB53bltTfR6ywfjkFU80UFgHPFizZipPy6j9z8KPPDBYwHZZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member23@gmail.com"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "588b7d16-823f-43c3-a9bd-375d18202d46",
                            Email = "member24@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name24",
                            Lastname = "LastName24",
                            LockoutEnabled = false,
                            NormalizedEmail = "member24@gmail.com",
                            NormalizedUserName = "member24@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEL51YHyVPaj8g1WQ5npxJoWIIx3pjoMFvxmdHKEvZ04HuAyfInFCwc3CYBGqog9iIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member24@gmail.com"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "655b0615-940a-47de-bd10-5bc711b820ba",
                            Email = "member25@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name25",
                            Lastname = "LastName25",
                            LockoutEnabled = false,
                            NormalizedEmail = "member25@gmail.com",
                            NormalizedUserName = "member25@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEMxcjjqLAH1gHDlxcctbdxKoIyCKlEtlO2gE6v2AU4J9pIKY6oQ5O0tpuCksC4a0vA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member25@gmail.com"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "77084158-2157-42ad-9b5b-624fadf14d26",
                            Email = "member26@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name26",
                            Lastname = "LastName26",
                            LockoutEnabled = false,
                            NormalizedEmail = "member26@gmail.com",
                            NormalizedUserName = "member26@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIrN9MpIuMYq/3gRS4YIg04mwX0LplchZWcdYyYT7wf5PrUBfDHkuC0BJJw6bQV7vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member26@gmail.com"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "67d9064d-2abc-4a78-a884-7ebc396ea570",
                            Email = "member27@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name27",
                            Lastname = "LastName27",
                            LockoutEnabled = false,
                            NormalizedEmail = "member27@gmail.com",
                            NormalizedUserName = "member27@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEE169XTjX0iXH6qC+XplezoZznoxUkyqFdTKagVH6zlXNasv1ysnmELyUB9EeLrBmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member27@gmail.com"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e1c4be41-a8f5-4a98-92fa-7af6bc9be2ba",
                            Email = "member28@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name28",
                            Lastname = "LastName28",
                            LockoutEnabled = false,
                            NormalizedEmail = "member28@gmail.com",
                            NormalizedUserName = "member28@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIonJjuPF9Wn2qT+PgVEKscCu27kh9MjuRt8cXIagRk/33FznmJgZDA5gGsk2iZKuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member28@gmail.com"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "221a04cc-6f06-4d32-b9a7-dc2658505b6b",
                            Email = "member29@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name29",
                            Lastname = "LastName29",
                            LockoutEnabled = false,
                            NormalizedEmail = "member29@gmail.com",
                            NormalizedUserName = "member29@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENl3ViZK69aKugfmmuwIWXsxEiKtx6lw8x9AeWA6aDst8bUsKsc+BwLSFJYmw+93Gg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member29@gmail.com"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "f6e63ed3-b515-4cbc-bde6-5df8c0f2d546",
                            Email = "member30@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name30",
                            Lastname = "LastName30",
                            LockoutEnabled = false,
                            NormalizedEmail = "member30@gmail.com",
                            NormalizedUserName = "member30@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELcKAkdajDhG1dnpPZ2TXqzgcoFrXPtaNQG7uRlO/2Kngpo4i+oXpv9QaxgKd9ngxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member30@gmail.com"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "35a3280d-0fc8-49f0-933a-bed4ccf8aa5f",
                            Email = "teacher31@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name31",
                            Lastname = "LastName31",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher31@gmail.com",
                            NormalizedUserName = "teacher31@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECqcWbCWF4TNFr/W3qWhUkXSaG38YeQncxD/60HiwE5VJJ0J3lWYiuMy6lVnpv5FBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher31@gmail.com"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "00e4c226-35f6-4305-905e-6b7bb89020fa",
                            Email = "teacher32@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name32",
                            Lastname = "LastName32",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher32@gmail.com",
                            NormalizedUserName = "teacher32@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEOe4NxzC84SLI28LrxSVK01OtZ2Dni++/qnnjQEzaQdLHTaD4auiKrMY4r2X4Wn3tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher32@gmail.com"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "bc83c7be-135d-4ba8-8b45-ce1966d7d8d4",
                            Email = "teacher33@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name33",
                            Lastname = "LastName33",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher33@gmail.com",
                            NormalizedUserName = "teacher33@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEEbS2LviQ98sHeiVSewBP2fKdaj4VbYuGP0G4aBW6WPUZQNdLAk0J2rzaPfbfFWaig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher33@gmail.com"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "6979ced1-da66-435a-ac75-07e059bc9ab2",
                            Email = "teacher34@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name34",
                            Lastname = "LastName34",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher34@gmail.com",
                            NormalizedUserName = "teacher34@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuaHH/FU3Rug75Nub4ojERdhgoL4cq9us+nCijxvC+bBVdMA5PjupXbl0JzvpF9HQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher34@gmail.com"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "322391fc-918e-4f66-876d-b9db55bc4ac6",
                            Email = "teacher35@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name35",
                            Lastname = "LastName35",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher35@gmail.com",
                            NormalizedUserName = "teacher35@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKQkVPe/OUNhRVXjTjbrpTJoXvSMUjSZZJGqQH3BjgSnFFfTIz9EZDB6tydDk5ZhtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher35@gmail.com"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "f8f6a2a1-163c-45c0-bf90-944964f76f0a",
                            Email = "teacher36@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name36",
                            Lastname = "LastName36",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher36@gmail.com",
                            NormalizedUserName = "teacher36@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEExa3ezC+xoLaN5dXkBiWTo9VNKRT/gNRNyed7Uvq0LaIk2fpjqnAEQzSFdSCgwt5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher36@gmail.com"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ac1974a2-7f17-4118-bcee-23fd5d49d2cf",
                            Email = "teacher37@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name37",
                            Lastname = "LastName37",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher37@gmail.com",
                            NormalizedUserName = "teacher37@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKCX1DZ6FeZ6i0Tq8YpVn5maKonTaRSoIpFWLNEjNyBD+2et0KegwSRBzQPMv4JRXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher37@gmail.com"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "74e2158b-4fde-4c2e-a508-5ec01cae2485",
                            Email = "teacher38@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name38",
                            Lastname = "LastName38",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher38@gmail.com",
                            NormalizedUserName = "teacher38@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECNaKniNuWXpH1IsKukPCdLUuQT8E4vOwQML/3y2a8ZVrqZTde45a7uBb2gpzzbULw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher38@gmail.com"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "c0f035af-e40f-4f39-acd2-e5b411c5301b",
                            Email = "teacher39@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name39",
                            Lastname = "LastName39",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher39@gmail.com",
                            NormalizedUserName = "teacher39@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEG+iSqm8pRt2h9tG6V+YL/gxRwYipOrWE5Rbm+QXEGIV2x2uu2riOIc4QN+Io5pczQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher39@gmail.com"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "95e74065-6713-4e25-a40e-eb6e26100b3e",
                            Email = "teacher40@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name40",
                            Lastname = "LastName40",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher40@gmail.com",
                            NormalizedUserName = "teacher40@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECIIR2baBDy8Ma80zp9ccEjVDcYubCzsIzUypxDD0d/dIGiUbhbfjssWGp+H7gMSVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher40@gmail.com"
                        },
                        new
                        {
                            Id = 41,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d2c69233-dbc0-457d-bc2b-4b1c33733a15",
                            Email = "staff41@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name41",
                            Lastname = "LastName41",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff41@gmail.com",
                            NormalizedUserName = "staff41@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEAHydZ6JLOt6EdvB6DLRpzlv7+l74nplDfR5KkkVlzDZljdpLzlWBpZfrD3Q5Ofhug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff41@gmail.com"
                        },
                        new
                        {
                            Id = 42,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "5bfae5cf-506e-47b8-8b73-94a8f0d2d163",
                            Email = "staff42@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name42",
                            Lastname = "LastName42",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff42@gmail.com",
                            NormalizedUserName = "staff42@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECc1DiAJgDCHDNvu38TMOSfqPPRLBQUgS6pGYjGRiD3uhgybPeCaG/3DUB2cbfUlkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff42@gmail.com"
                        },
                        new
                        {
                            Id = 43,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "43cec95d-86e7-4e4c-961f-81b6f27c97ac",
                            Email = "staff43@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name43",
                            Lastname = "LastName43",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff43@gmail.com",
                            NormalizedUserName = "staff43@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEHcIoo2fIAI2GCSu5Ly3QlLPvB/Gb6u1stRUAj/B4lNkdyqc4f5EH93GUJmozQX6hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff43@gmail.com"
                        },
                        new
                        {
                            Id = 44,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "7c25e12a-9b7a-46b2-a121-f440785d9b56",
                            Email = "staff44@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name44",
                            Lastname = "LastName44",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff44@gmail.com",
                            NormalizedUserName = "staff44@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEGUZO5jxagBxyx1qcxhfuiutIZUQOqKpo3ncl1V0H70TE67Mcd9QK60c/nzLBc+nNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff44@gmail.com"
                        },
                        new
                        {
                            Id = 45,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "382b7111-3dc9-41e4-a440-29899268f868",
                            Email = "staff45@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name45",
                            Lastname = "LastName45",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff45@gmail.com",
                            NormalizedUserName = "staff45@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEN5sGdIA18iRavARLlllAqTNDiCXglGasUxOskmbG0uBMceZWIKjGV30y/Qry0Jleg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff45@gmail.com"
                        },
                        new
                        {
                            Id = 46,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "1f592271-bd03-4577-8b13-b3ae80126ff9",
                            Email = "admin46@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name46",
                            Lastname = "LastName46",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin46@gmail.com",
                            NormalizedUserName = "admin46@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEEKgjU3VajBr/GmkBPddxf9PIJAN7qy8tVt4RCtQpm2e23XMy8q066yxhXyUJFRc9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "admin46@gmail.com"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Category1"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Category2"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Category3"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Category4"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Category5"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Name = "Category6"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Name = "Category7"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            Name = "Category8"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            Name = "Category9"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            Name = "Category10"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnddDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Yoga course number 1",
                            EnddDate = new DateTime(2023, 8, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(7816),
                            IsActive = true,
                            Name = "Course1",
                            Price = 100.0,
                            StartDate = new DateTime(2023, 7, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(7797)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Yoga course number 2",
                            EnddDate = new DateTime(2023, 8, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(7829),
                            IsActive = true,
                            Name = "Course2",
                            Price = 200.0,
                            StartDate = new DateTime(2023, 7, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(7829)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Yoga course number 3",
                            EnddDate = new DateTime(2023, 8, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(7924),
                            IsActive = true,
                            Name = "Course3",
                            Price = 300.0,
                            StartDate = new DateTime(2023, 7, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(7924)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Yoga course number 4",
                            EnddDate = new DateTime(2023, 8, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8005),
                            IsActive = true,
                            Name = "Course4",
                            Price = 400.0,
                            StartDate = new DateTime(2023, 7, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8004)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Description = "Yoga course number 5",
                            EnddDate = new DateTime(2023, 8, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8011),
                            IsActive = true,
                            Name = "Course5",
                            Price = 500.0,
                            StartDate = new DateTime(2023, 7, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8010)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Description = "Yoga course number 6",
                            EnddDate = new DateTime(2023, 8, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8016),
                            IsActive = true,
                            Name = "Course6",
                            Price = 600.0,
                            StartDate = new DateTime(2023, 7, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8015)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Description = "Yoga course number 7",
                            EnddDate = new DateTime(2023, 8, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8020),
                            IsActive = true,
                            Name = "Course7",
                            Price = 700.0,
                            StartDate = new DateTime(2023, 7, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8020)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            Description = "Yoga course number 8",
                            EnddDate = new DateTime(2023, 8, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8024),
                            IsActive = true,
                            Name = "Course8",
                            Price = 800.0,
                            StartDate = new DateTime(2023, 7, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8023)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Description = "Yoga course number 9",
                            EnddDate = new DateTime(2023, 8, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8028),
                            IsActive = true,
                            Name = "Course9",
                            Price = 900.0,
                            StartDate = new DateTime(2023, 7, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8028)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            Description = "Yoga course number 10",
                            EnddDate = new DateTime(2023, 8, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8033),
                            IsActive = true,
                            Name = "Course10",
                            Price = 1000.0,
                            StartDate = new DateTime(2023, 7, 6, 10, 56, 14, 772, DateTimeKind.Local).AddTicks(8033)
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Enrollment", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "YogaClassId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("MemberLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 2,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 3,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 4,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 5,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 6,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 7,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 8,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 9,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 10,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 11,
                            AppUserId = 11,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 12,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 13,
                            AppUserId = 13,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 14,
                            AppUserId = 14,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 15,
                            AppUserId = 15,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 16,
                            AppUserId = 16,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 17,
                            AppUserId = 17,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 18,
                            AppUserId = 18,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 19,
                            AppUserId = 19,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 20,
                            AppUserId = 20,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 21,
                            AppUserId = 21,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 22,
                            AppUserId = 22,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 23,
                            AppUserId = 23,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 24,
                            AppUserId = 24,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 25,
                            AppUserId = 25,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 26,
                            AppUserId = 26,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 27,
                            AppUserId = 27,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 28,
                            AppUserId = 28,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 29,
                            AppUserId = 29,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 30,
                            AppUserId = 30,
                            MemberLevel = 0
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Schedule", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.HasKey("TimeSlotId", "YogaClassId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            TimeSlotId = 11,
                            YogaClassId = 1
                        },
                        new
                        {
                            TimeSlotId = 13,
                            YogaClassId = 1
                        },
                        new
                        {
                            TimeSlotId = 15,
                            YogaClassId = 1
                        },
                        new
                        {
                            TimeSlotId = 12,
                            YogaClassId = 2
                        },
                        new
                        {
                            TimeSlotId = 14,
                            YogaClassId = 2
                        },
                        new
                        {
                            TimeSlotId = 21,
                            YogaClassId = 3
                        },
                        new
                        {
                            TimeSlotId = 23,
                            YogaClassId = 3
                        },
                        new
                        {
                            TimeSlotId = 25,
                            YogaClassId = 3
                        },
                        new
                        {
                            TimeSlotId = 22,
                            YogaClassId = 4
                        },
                        new
                        {
                            TimeSlotId = 24,
                            YogaClassId = 4
                        },
                        new
                        {
                            TimeSlotId = 31,
                            YogaClassId = 5
                        },
                        new
                        {
                            TimeSlotId = 33,
                            YogaClassId = 5
                        },
                        new
                        {
                            TimeSlotId = 35,
                            YogaClassId = 5
                        },
                        new
                        {
                            TimeSlotId = 32,
                            YogaClassId = 6
                        },
                        new
                        {
                            TimeSlotId = 34,
                            YogaClassId = 6
                        },
                        new
                        {
                            TimeSlotId = 16,
                            YogaClassId = 7
                        },
                        new
                        {
                            TimeSlotId = 17,
                            YogaClassId = 7
                        },
                        new
                        {
                            TimeSlotId = 26,
                            YogaClassId = 8
                        },
                        new
                        {
                            TimeSlotId = 27,
                            YogaClassId = 8
                        },
                        new
                        {
                            TimeSlotId = 36,
                            YogaClassId = 9
                        },
                        new
                        {
                            TimeSlotId = 37,
                            YogaClassId = 10
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherProfileId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherProfileId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("TeacherEnrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("TeacherProfiles");

                    b.HasData(
                        new
                        {
                            Id = 31,
                            AppUserId = 31
                        },
                        new
                        {
                            Id = 32,
                            AppUserId = 32
                        },
                        new
                        {
                            Id = 33,
                            AppUserId = 33
                        },
                        new
                        {
                            Id = 34,
                            AppUserId = 34
                        },
                        new
                        {
                            Id = 35,
                            AppUserId = 35
                        },
                        new
                        {
                            Id = 36,
                            AppUserId = 36
                        },
                        new
                        {
                            Id = 37,
                            AppUserId = 37
                        },
                        new
                        {
                            Id = 38,
                            AppUserId = 38
                        },
                        new
                        {
                            Id = 39,
                            AppUserId = 39
                        },
                        new
                        {
                            Id = 40,
                            AppUserId = 40
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherSchedule", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("bit");

                    b.HasKey("TimeSlotId", "TeacherProfileId");

                    b.HasIndex("TeacherProfileId");

                    b.ToTable("TeacherSchedule");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 12,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 13,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 14,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 15,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 16,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 17,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 21,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 22,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 23,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 24,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 25,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 26,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 27,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 31,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 32,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 33,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 34,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 35,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 36,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 37,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(1, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<bool>("IsAdminWallet")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 2,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 3,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 4,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 5,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 6,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 7,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 8,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 9,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 10,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 11,
                            AppUserId = 11,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 12,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 13,
                            AppUserId = 13,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 14,
                            AppUserId = 14,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 15,
                            AppUserId = 15,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 16,
                            AppUserId = 16,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 17,
                            AppUserId = 17,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 18,
                            AppUserId = 18,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 19,
                            AppUserId = 19,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 20,
                            AppUserId = 20,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 21,
                            AppUserId = 21,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 22,
                            AppUserId = 22,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 23,
                            AppUserId = 23,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 24,
                            AppUserId = 24,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 25,
                            AppUserId = 25,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 26,
                            AppUserId = 26,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 27,
                            AppUserId = 27,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 28,
                            AppUserId = 28,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 29,
                            AppUserId = 29,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 30,
                            AppUserId = 30,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 31,
                            AppUserId = 31,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 32,
                            AppUserId = 32,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 33,
                            AppUserId = 33,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 34,
                            AppUserId = 34,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 35,
                            AppUserId = 35,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 36,
                            AppUserId = 36,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 37,
                            AppUserId = 37,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 38,
                            AppUserId = 38,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 39,
                            AppUserId = 39,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 40,
                            AppUserId = 40,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 41,
                            AppUserId = 41,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 42,
                            AppUserId = 42,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 43,
                            AppUserId = 43,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 44,
                            AppUserId = 44,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 45,
                            AppUserId = 45,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 46,
                            AppUserId = 46,
                            Balance = 0.0,
                            IsAdminWallet = true
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("YogaClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Name = "Class1",
                            Size = 19,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Name = "Class2",
                            Size = 18,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Name = "Class3",
                            Size = 17,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            Name = "Class4",
                            Size = 16,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            Name = "Class5",
                            Size = 15,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            Name = "Class6",
                            Size = 14,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            Name = "Class7",
                            Size = 13,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            Name = "Class8",
                            Size = 12,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            Name = "Class9",
                            Size = 11,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            Name = "Class10",
                            Size = 10,
                            YogaClassStatus = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherProfileTimeSlot", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("AvailableSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", null)
                        .WithMany()
                        .HasForeignKey("AvailableTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Enrollment", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Member", "Member")
                        .WithMany("Enrollments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("Enrollments")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("Member")
                        .HasForeignKey("YogaManagement.Domain.Models.Member", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Schedule", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", "TimeSlot")
                        .WithMany("Schedule")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("Schedule")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSlot");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherEnrollment", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", "TeacherProfile")
                        .WithMany("TeacherEnrollments")
                        .HasForeignKey("TeacherProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("TeacherEnrollments")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherProfile");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("TeacherProfile")
                        .HasForeignKey("YogaManagement.Domain.Models.TeacherProfile", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherSchedule", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", "TeacherProfile")
                        .WithMany()
                        .HasForeignKey("TeacherProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherProfile");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Transaction", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("Wallet")
                        .HasForeignKey("YogaManagement.Domain.Models.Wallet", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Course", "Course")
                        .WithMany("YogaClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppUser", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("TeacherProfile");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.Navigation("YogaClasses");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.Navigation("TeacherEnrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TimeSlot", b =>
                {
                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Schedule");

                    b.Navigation("TeacherEnrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
