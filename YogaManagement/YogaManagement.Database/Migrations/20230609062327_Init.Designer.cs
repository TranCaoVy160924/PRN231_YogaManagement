// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YogaManagement.Database.EF;

#nullable disable

namespace YogaManagement.Database.Migrations
{
    [DbContext(typeof(YogaManagementDbContext))]
    [Migration("20230609062327_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 31,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 32,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 33,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 34,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 35,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 36,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 37,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 38,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 39,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 40,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 41,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 42,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 43,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 44,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 45,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 46,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeacherProfileTimeSlot", b =>
                {
                    b.Property<int>("AvailableSlotId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableTeacherId")
                        .HasColumnType("int");

                    b.HasKey("AvailableSlotId", "AvailableTeacherId");

                    b.HasIndex("AvailableTeacherId");

                    b.ToTable("TeacherProfileTimeSlot");
                });

            modelBuilder.Entity("TimeSlotYogaClass", b =>
                {
                    b.Property<int>("TimeSlotsId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassesId")
                        .HasColumnType("int");

                    b.HasKey("TimeSlotsId", "YogaClassesId");

                    b.HasIndex("YogaClassesId");

                    b.ToTable("TimeSlotYogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "MEMBER",
                            Name = "Member",
                            NormalizedName = "member"
                        },
                        new
                        {
                            Id = 2,
                            Description = "TEACHER",
                            Name = "Teacher",
                            NormalizedName = "teacher"
                        },
                        new
                        {
                            Id = 3,
                            Description = "STAFF",
                            Name = "Staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = 4,
                            Description = "ADMIN",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e3326fbd-bc1b-464c-9969-2f678e9886bf",
                            Email = "member1@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name1",
                            Lastname = "LastName1",
                            LockoutEnabled = false,
                            NormalizedEmail = "member1@gmail.com",
                            NormalizedUserName = "usermember1",
                            PasswordHash = "AQAAAAIAAYagAAAAEE7fwwmQ4QDAGxp1nTx5hEyfeOT44eux3t5R5m/TGHjXocofxw0eDP6wLhXytiAHNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "387aff09-d7cb-4a9d-84c3-e0c45d21f870",
                            Email = "member2@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name2",
                            Lastname = "LastName2",
                            LockoutEnabled = false,
                            NormalizedEmail = "member2@gmail.com",
                            NormalizedUserName = "usermember2",
                            PasswordHash = "AQAAAAIAAYagAAAAEJnJG+aukmln4P41F8HO7HvO/pYUJw6yw5I3ueDPncR9OdF30+1UB5wr3a6oKnuQ0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "1faad31e-8a6d-48b9-8835-b986b06ac9f0",
                            Email = "member3@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name3",
                            Lastname = "LastName3",
                            LockoutEnabled = false,
                            NormalizedEmail = "member3@gmail.com",
                            NormalizedUserName = "usermember3",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVe0vVgZ/XorCdOpNM3Z6qBSt+i/TJFZPZ+RppEnW2jN+2JtlOtJrjy+JiMXSpLeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "3c4859e2-f1e6-462e-8eaf-77ffc85a81e2",
                            Email = "member4@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name4",
                            Lastname = "LastName4",
                            LockoutEnabled = false,
                            NormalizedEmail = "member4@gmail.com",
                            NormalizedUserName = "usermember4",
                            PasswordHash = "AQAAAAIAAYagAAAAEB8o9OkluwpaQUaX/mrSnlahJ/e1Pc/mZ8uFeWe7xDdUVb1TIGBSkygyAOyWiQZgXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "f70539a8-a2f4-421e-a270-77248579182b",
                            Email = "member5@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name5",
                            Lastname = "LastName5",
                            LockoutEnabled = false,
                            NormalizedEmail = "member5@gmail.com",
                            NormalizedUserName = "usermember5",
                            PasswordHash = "AQAAAAIAAYagAAAAEHFjotLHlon1tK0UFhSo2kcayMV1FLAPJ3vsEL7xXyNiDC567fjcG2nnG59m0cu5MQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "1d7fe282-da22-472a-83cf-4346256b2edb",
                            Email = "member6@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name6",
                            Lastname = "LastName6",
                            LockoutEnabled = false,
                            NormalizedEmail = "member6@gmail.com",
                            NormalizedUserName = "usermember6",
                            PasswordHash = "AQAAAAIAAYagAAAAEO7ObrvOWxXCu2EIbcUaR3oYEB2h92HFcv4cHZlkZB8MiRq+aprGilLAblCJmFBZ7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember6"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "764b24b3-e289-4e41-b796-a24d1ac359ea",
                            Email = "member7@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name7",
                            Lastname = "LastName7",
                            LockoutEnabled = false,
                            NormalizedEmail = "member7@gmail.com",
                            NormalizedUserName = "usermember7",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTxzG0LGb2F2nQCsFbEdwLeiaDvpwYtTOGTd1mZEW98RJoziLs9mkR96KC3lVrC0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e55d603c-c40b-47e5-a3af-6aa9c4813d17",
                            Email = "member8@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name8",
                            Lastname = "LastName8",
                            LockoutEnabled = false,
                            NormalizedEmail = "member8@gmail.com",
                            NormalizedUserName = "usermember8",
                            PasswordHash = "AQAAAAIAAYagAAAAEOG734asZ3DHaPVfEZDCLCzRHOKODWpmLLHeUIg04qfC5paTmDVBpccP2PgoNZo6iQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember8"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "10e3549f-cd8e-4568-8996-b441c40de1e2",
                            Email = "member9@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name9",
                            Lastname = "LastName9",
                            LockoutEnabled = false,
                            NormalizedEmail = "member9@gmail.com",
                            NormalizedUserName = "usermember9",
                            PasswordHash = "AQAAAAIAAYagAAAAEElEOLZPVa0DhSRQ9b0x547qjcAUApCQJG6bCXLsWV0UBH1TW8zauIU3DOjVZcD4eA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember9"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "66fcb9cd-4b59-4352-92f2-f74a328fdefe",
                            Email = "member10@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name10",
                            Lastname = "LastName10",
                            LockoutEnabled = false,
                            NormalizedEmail = "member10@gmail.com",
                            NormalizedUserName = "usermember10",
                            PasswordHash = "AQAAAAIAAYagAAAAEOAu6xWNibBchDwHeRPpXOkaUO85VjBl98i1WvLok4BUfZNjODLXyRyOw48OL7mlmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember10"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "11606e8b-8085-49e0-a967-4f48aa68d9c1",
                            Email = "member11@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name11",
                            Lastname = "LastName11",
                            LockoutEnabled = false,
                            NormalizedEmail = "member11@gmail.com",
                            NormalizedUserName = "usermember11",
                            PasswordHash = "AQAAAAIAAYagAAAAEMzuW9QWst81w9TOWpJsVMM+MVAanUgo1aLCYb3jMm4auz4dlt2ZJr4yBl9RPGUQAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember11"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "cf79daeb-d307-4445-92d7-7da80b170ad9",
                            Email = "member12@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name12",
                            Lastname = "LastName12",
                            LockoutEnabled = false,
                            NormalizedEmail = "member12@gmail.com",
                            NormalizedUserName = "usermember12",
                            PasswordHash = "AQAAAAIAAYagAAAAEEVX6d22FPLSWZXnLe82hvnQzChmzlWgoJE4rf2oAP3IMK7ie3e1/J1w19Ss5X+lkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember12"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "8dc2de6c-b084-49ee-95b5-c4669fa1a1fb",
                            Email = "member13@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name13",
                            Lastname = "LastName13",
                            LockoutEnabled = false,
                            NormalizedEmail = "member13@gmail.com",
                            NormalizedUserName = "usermember13",
                            PasswordHash = "AQAAAAIAAYagAAAAEHco6+D9C+sNJj7C0dQ8Qm4UZSHK1S7MKj/5SPABmCxyodGfZwBbsUCSsnpGBRfv0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember13"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "b9f080d7-8ebb-480f-9b77-9b060ff89f88",
                            Email = "member14@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name14",
                            Lastname = "LastName14",
                            LockoutEnabled = false,
                            NormalizedEmail = "member14@gmail.com",
                            NormalizedUserName = "usermember14",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxj1yoXf5b7lnamEhoeYYUXtyz4BlxxxsFISQ0qmphjsT1BDDEblIYKMIphShKkJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember14"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "b9ffac78-2717-43fa-bc08-1a8ecf638fe7",
                            Email = "member15@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name15",
                            Lastname = "LastName15",
                            LockoutEnabled = false,
                            NormalizedEmail = "member15@gmail.com",
                            NormalizedUserName = "usermember15",
                            PasswordHash = "AQAAAAIAAYagAAAAEBymr7t+DAPubT9Fp+SQ2A62AiagsA+wnaDh2IvKCtgPkPOAXu6pR6LvTj27K87IVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember15"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "f3fc0515-f56f-401c-8921-0543b4efeaed",
                            Email = "member16@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name16",
                            Lastname = "LastName16",
                            LockoutEnabled = false,
                            NormalizedEmail = "member16@gmail.com",
                            NormalizedUserName = "usermember16",
                            PasswordHash = "AQAAAAIAAYagAAAAEOcpopOqu2hVr4KsSkMPCHaUa763puUOXjxadsXtWepCYbPf96nKsK518D2kPTTaOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember16"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "4754db0c-0772-433d-95a6-ccb2de1d0131",
                            Email = "member17@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name17",
                            Lastname = "LastName17",
                            LockoutEnabled = false,
                            NormalizedEmail = "member17@gmail.com",
                            NormalizedUserName = "usermember17",
                            PasswordHash = "AQAAAAIAAYagAAAAEHAm/L/8DHvfmOBNoyotvt5+ukPGKahuzTi6mhQPLD/92h92bdO0vSdvUo0YfF5qCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember17"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "7f83bda3-c150-481b-9d99-b0c9e788663f",
                            Email = "member18@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name18",
                            Lastname = "LastName18",
                            LockoutEnabled = false,
                            NormalizedEmail = "member18@gmail.com",
                            NormalizedUserName = "usermember18",
                            PasswordHash = "AQAAAAIAAYagAAAAEB81rah7ultKKzU+bVd7jDRo71AY7kYsNcVkxF/LCKX2/Ye9XSHwwUcHS0qww+lErA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember18"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "4fdede92-2197-4510-a5e5-d104473c3350",
                            Email = "member19@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name19",
                            Lastname = "LastName19",
                            LockoutEnabled = false,
                            NormalizedEmail = "member19@gmail.com",
                            NormalizedUserName = "usermember19",
                            PasswordHash = "AQAAAAIAAYagAAAAEBiflrlSH3UX963muRb6EdUy47dRYKo67u2WrDj8Ofuw45lUmGKmtwviyF2GLiFmyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember19"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "9d1e51ec-0897-49a8-af86-6769923ac91e",
                            Email = "member20@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name20",
                            Lastname = "LastName20",
                            LockoutEnabled = false,
                            NormalizedEmail = "member20@gmail.com",
                            NormalizedUserName = "usermember20",
                            PasswordHash = "AQAAAAIAAYagAAAAEMdjcVcFkoJnHbG92CwRWW8gTCG4tdBl8cOGHjeya6AVz2+/kpHI//QEXdcgRlMqog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember20"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "7425d9b6-1272-4571-8543-bdc3078b6a0d",
                            Email = "member21@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name21",
                            Lastname = "LastName21",
                            LockoutEnabled = false,
                            NormalizedEmail = "member21@gmail.com",
                            NormalizedUserName = "usermember21",
                            PasswordHash = "AQAAAAIAAYagAAAAEMawTRWf9UWeuztnnxdvXvZTh80vgZ0ygOZD9TLNG2cFrh127IsOUmpt0h3uWGoWpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember21"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "04e5f49b-c7c3-4f0d-bbeb-c03f82e7e6a6",
                            Email = "member22@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name22",
                            Lastname = "LastName22",
                            LockoutEnabled = false,
                            NormalizedEmail = "member22@gmail.com",
                            NormalizedUserName = "usermember22",
                            PasswordHash = "AQAAAAIAAYagAAAAEOZNG0YoMK6M8/CC4Wc8pIn+QhFcenk4dNesc20Zdz+e0crj0pVrtQP9cMC3f81ZVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember22"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "50b24b74-420a-4bb2-a47f-d88869f00072",
                            Email = "member23@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name23",
                            Lastname = "LastName23",
                            LockoutEnabled = false,
                            NormalizedEmail = "member23@gmail.com",
                            NormalizedUserName = "usermember23",
                            PasswordHash = "AQAAAAIAAYagAAAAEF6L22mAMcZgPD2i5uFzR7bf5DoLirMt1pDjgbeCRvvIv7NltSJM5DnNWmDMrtEVXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember23"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "7d2f30ae-99e2-4ab3-bfb8-f19797c4de85",
                            Email = "member24@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name24",
                            Lastname = "LastName24",
                            LockoutEnabled = false,
                            NormalizedEmail = "member24@gmail.com",
                            NormalizedUserName = "usermember24",
                            PasswordHash = "AQAAAAIAAYagAAAAELWv3s7w0zfl+shTyYKwV5XKOZE9JRIf/ho+KPC9Imz9j7hR/SNwzKggGVfi9z9ATg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember24"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "b064004d-d366-4d8c-a9b6-9dc2e5b74940",
                            Email = "member25@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name25",
                            Lastname = "LastName25",
                            LockoutEnabled = false,
                            NormalizedEmail = "member25@gmail.com",
                            NormalizedUserName = "usermember25",
                            PasswordHash = "AQAAAAIAAYagAAAAELzZZ37qVVGzsCsH2pcPjsNezhVu0kRg20WWm4ZUqJQMFWCtNoo5HrLicDMR6p8qEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember25"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "253b578f-9c6e-4b62-8b7c-27bfdcfe7660",
                            Email = "member26@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name26",
                            Lastname = "LastName26",
                            LockoutEnabled = false,
                            NormalizedEmail = "member26@gmail.com",
                            NormalizedUserName = "usermember26",
                            PasswordHash = "AQAAAAIAAYagAAAAEKyOfYzfoNdhob6RjByZVK7IhE8PqyyJfJhrDb/UnP9/UZ3l1SUUdYvahNZHoNbfeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember26"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d8150e3f-8b39-4b3f-b865-e87aaf764caa",
                            Email = "member27@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name27",
                            Lastname = "LastName27",
                            LockoutEnabled = false,
                            NormalizedEmail = "member27@gmail.com",
                            NormalizedUserName = "usermember27",
                            PasswordHash = "AQAAAAIAAYagAAAAENbHkxL3QbiBZ7i9YeqkYOTuPINjeEV9lwt89jXr11WmgrWTqRlwaEJeGl8j9FRonw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember27"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "c623031c-2c1c-4b6b-985d-bce801a25780",
                            Email = "member28@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name28",
                            Lastname = "LastName28",
                            LockoutEnabled = false,
                            NormalizedEmail = "member28@gmail.com",
                            NormalizedUserName = "usermember28",
                            PasswordHash = "AQAAAAIAAYagAAAAEEPxN3vxHCl0XiMN182hPqly4lwedc1OXQD7sueil2O1QHpSaoXls2dpvqg4XpFfjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember28"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "77cb1bf5-585a-444d-bd21-419a99208321",
                            Email = "member29@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name29",
                            Lastname = "LastName29",
                            LockoutEnabled = false,
                            NormalizedEmail = "member29@gmail.com",
                            NormalizedUserName = "usermember29",
                            PasswordHash = "AQAAAAIAAYagAAAAEFYvjbhXDvaUZhCkAU2VHiLKzm96+hvSHVuM/DhpkVPJ1/eoRDkYOu1R6/62lYy0xA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember29"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "8efd5b52-d3d3-49dd-910f-d0d9beba1d39",
                            Email = "member30@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name30",
                            Lastname = "LastName30",
                            LockoutEnabled = false,
                            NormalizedEmail = "member30@gmail.com",
                            NormalizedUserName = "usermember30",
                            PasswordHash = "AQAAAAIAAYagAAAAEAnF5dHbeninZ2p44OZd27He7Ne+vhgbG5WsZk1UifnGWXWO584az2YL+SXq+45SVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserMember30"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ec4254d2-792a-4f8b-8137-1c3b222c9f8e",
                            Email = "teacher31@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name31",
                            Lastname = "LastName31",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher31@gmail.com",
                            NormalizedUserName = "userteacher31",
                            PasswordHash = "AQAAAAIAAYagAAAAEEpIiAleEAj7iWhmih6ETXUx2JzHfqSHWaX1BtIuEroXY5MFzH9ETiKTy1Tj7d/eGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher31"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "341d12f8-9917-474c-90fc-759f069861ab",
                            Email = "teacher32@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name32",
                            Lastname = "LastName32",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher32@gmail.com",
                            NormalizedUserName = "userteacher32",
                            PasswordHash = "AQAAAAIAAYagAAAAEHXaNtfEZIDhQ2rH1JiQ5Nkzb2M1CBXOdD0m6I/02B8E340q8YjNbJH6AuHQvi0UAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher32"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e5b5e7b3-b65c-4a5e-a565-bda6e706be23",
                            Email = "teacher33@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name33",
                            Lastname = "LastName33",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher33@gmail.com",
                            NormalizedUserName = "userteacher33",
                            PasswordHash = "AQAAAAIAAYagAAAAEOnHRKHD4L+eOoYHk0KlvpvMcQw30y6uMhBEojTopXzyJ/+znX35H+Pf0IbM8mTxKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher33"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "24fc858c-4c26-49ef-9bdc-d0343697efc8",
                            Email = "teacher34@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name34",
                            Lastname = "LastName34",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher34@gmail.com",
                            NormalizedUserName = "userteacher34",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6euWIO5q5jutHXBg5dq+0BLBbhmyWcNBisePOjRZt8QggacutoeFefgb6ARu1A2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher34"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "9fe5e2a4-82e5-4a5b-ba66-3450597f377a",
                            Email = "teacher35@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name35",
                            Lastname = "LastName35",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher35@gmail.com",
                            NormalizedUserName = "userteacher35",
                            PasswordHash = "AQAAAAIAAYagAAAAEM4NLugbKY5ciCi0/w7m9qPcch2GyCvdBCjzCtknlwK3qr0tkao+is/HP7VCgIOtoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher35"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "80b90325-d48f-474a-8909-72603150dced",
                            Email = "teacher36@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name36",
                            Lastname = "LastName36",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher36@gmail.com",
                            NormalizedUserName = "userteacher36",
                            PasswordHash = "AQAAAAIAAYagAAAAEL0Ganh4xVVPug1wGTvBQF7zLBG+AgZm381bDzfj+NuZrSF7ODJQbhGGtQZAqoOYYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher36"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d73efe0e-1d8c-48c3-a281-16412a796062",
                            Email = "teacher37@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name37",
                            Lastname = "LastName37",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher37@gmail.com",
                            NormalizedUserName = "userteacher37",
                            PasswordHash = "AQAAAAIAAYagAAAAECuHRMDzjvltmEIHtyZx4IiZIIEXgpJ9tBBTMxqHSeA0Wi2CYmxN+gNHi4wq0BMI1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher37"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d4be2121-9c0e-40bc-92e5-3227398da332",
                            Email = "teacher38@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name38",
                            Lastname = "LastName38",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher38@gmail.com",
                            NormalizedUserName = "userteacher38",
                            PasswordHash = "AQAAAAIAAYagAAAAEI16NMvFKPG4IXI99fHG5U89Y+g5RUal8ILqT7y60UAYAsEmkdbtPBrPWVMIy06KNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher38"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "4f2dcb70-4051-4caa-b9bb-7fe12928c3ee",
                            Email = "teacher39@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name39",
                            Lastname = "LastName39",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher39@gmail.com",
                            NormalizedUserName = "userteacher39",
                            PasswordHash = "AQAAAAIAAYagAAAAENl9PJJWr0i8cdt6uUfuqz+7h3nSj+qu9ExYkWd8ywFrhEw4on+REg7CFlcYm1vZuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher39"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "0b009e44-01e2-45e5-ac6f-d89539c5a3eb",
                            Email = "teacher40@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name40",
                            Lastname = "LastName40",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher40@gmail.com",
                            NormalizedUserName = "userteacher40",
                            PasswordHash = "AQAAAAIAAYagAAAAEChVaXWfzbRLQrqTCHYbsGmVBimGXZFaupVK4NWwvqA3EqnybnxE3FgUwDAODV4sGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher40"
                        },
                        new
                        {
                            Id = 41,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "479dafaf-9dbb-4614-b5c8-aca8d1efacc8",
                            Email = "staff41@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name41",
                            Lastname = "LastName41",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff41@gmail.com",
                            NormalizedUserName = "userstaff41",
                            PasswordHash = "AQAAAAIAAYagAAAAEGp2RvaHwF0ks5QOoWz3NcnrFw2oZ5xnHV4IVo63P2W57gA1i857q9lWfr7Q60DaXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff41"
                        },
                        new
                        {
                            Id = 42,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "eff0a403-6718-4a21-88cf-10a33c8c8116",
                            Email = "staff42@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name42",
                            Lastname = "LastName42",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff42@gmail.com",
                            NormalizedUserName = "userstaff42",
                            PasswordHash = "AQAAAAIAAYagAAAAEFvCYa1P6N6c2y9tNl8Lpxc5vw7QFqB84nwwc0L9b5ibC2vXEF4GH3YFua2yFbcJDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff42"
                        },
                        new
                        {
                            Id = 43,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "c8c7b032-5eb7-4208-964b-78a3032a4ba2",
                            Email = "staff43@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name43",
                            Lastname = "LastName43",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff43@gmail.com",
                            NormalizedUserName = "userstaff43",
                            PasswordHash = "AQAAAAIAAYagAAAAEJaFMrQyglqRO/U79zFcAG3tzQAT/Z/F9j1DXf03EBl5jxsPpU5qFvxlF5mpNdL3YA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff43"
                        },
                        new
                        {
                            Id = 44,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "db57ae90-c9e5-44fc-94eb-41542d6e79fe",
                            Email = "staff44@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name44",
                            Lastname = "LastName44",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff44@gmail.com",
                            NormalizedUserName = "userstaff44",
                            PasswordHash = "AQAAAAIAAYagAAAAENIgQiK6kta+npln7qr3xS6yUPk6hRmm8/Q+e4BcNxhB9qSFp1jl4jedEX/ImCROWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff44"
                        },
                        new
                        {
                            Id = 45,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "65350705-87ff-4e4e-afeb-a88e2088009f",
                            Email = "staff45@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name45",
                            Lastname = "LastName45",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff45@gmail.com",
                            NormalizedUserName = "userstaff45",
                            PasswordHash = "AQAAAAIAAYagAAAAEKg8BQrkesnm74Hbn+fuEmw8mpvfXgpqZvV1i1qDz9XmEmtq62ejI+aL9HSe+V//2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff45"
                        },
                        new
                        {
                            Id = 46,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "3075136b-6e22-47b2-9fb2-27ce31806319",
                            Email = "admin46@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name46",
                            Lastname = "LastName46",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin46@gmail.com",
                            NormalizedUserName = "useradmin46",
                            PasswordHash = "AQAAAAIAAYagAAAAEFSxWMos4C5NcnjRSzAkysajrzu4+fjersR83T7/KnRVFXK106/Qbvmw3v5Wz8LK9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = false,
                            TwoFactorEnabled = false,
                            UserName = "UserAdmin46"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Category1"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Category2"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Category3"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Category4"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Category5"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Name = "Category6"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Name = "Category7"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            Name = "Category8"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            Name = "Category9"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            Name = "Category10"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnddDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Yoga course number 1",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course1",
                            Price = 100.0,
                            StartDate = new DateTime(2023, 6, 9, 13, 23, 26, 832, DateTimeKind.Local).AddTicks(5773)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Yoga course number 2",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course2",
                            Price = 200.0,
                            StartDate = new DateTime(2023, 6, 9, 13, 23, 26, 832, DateTimeKind.Local).AddTicks(5807)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Yoga course number 3",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course3",
                            Price = 300.0,
                            StartDate = new DateTime(2023, 6, 9, 13, 23, 26, 832, DateTimeKind.Local).AddTicks(5814)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Yoga course number 4",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course4",
                            Price = 400.0,
                            StartDate = new DateTime(2023, 6, 9, 13, 23, 26, 832, DateTimeKind.Local).AddTicks(5820)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Description = "Yoga course number 5",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course5",
                            Price = 500.0,
                            StartDate = new DateTime(2023, 6, 9, 13, 23, 26, 832, DateTimeKind.Local).AddTicks(5827)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Description = "Yoga course number 6",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course6",
                            Price = 600.0,
                            StartDate = new DateTime(2023, 6, 9, 13, 23, 26, 832, DateTimeKind.Local).AddTicks(5835)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Description = "Yoga course number 7",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course7",
                            Price = 700.0,
                            StartDate = new DateTime(2023, 6, 9, 13, 23, 26, 832, DateTimeKind.Local).AddTicks(5841)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            Description = "Yoga course number 8",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course8",
                            Price = 800.0,
                            StartDate = new DateTime(2023, 6, 9, 13, 23, 26, 832, DateTimeKind.Local).AddTicks(5848)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Description = "Yoga course number 9",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course9",
                            Price = 900.0,
                            StartDate = new DateTime(2023, 6, 9, 13, 23, 26, 832, DateTimeKind.Local).AddTicks(5854)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            Description = "Yoga course number 10",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course10",
                            Price = 1000.0,
                            StartDate = new DateTime(2023, 6, 9, 13, 23, 26, 832, DateTimeKind.Local).AddTicks(5862)
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Enrollment", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "YogaClassId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 5
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 6
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 7
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 8
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 9
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 10
                        },
                        new
                        {
                            Id = 11,
                            AppUserId = 11
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 12
                        },
                        new
                        {
                            Id = 13,
                            AppUserId = 13
                        },
                        new
                        {
                            Id = 14,
                            AppUserId = 14
                        },
                        new
                        {
                            Id = 15,
                            AppUserId = 15
                        },
                        new
                        {
                            Id = 16,
                            AppUserId = 16
                        },
                        new
                        {
                            Id = 17,
                            AppUserId = 17
                        },
                        new
                        {
                            Id = 18,
                            AppUserId = 18
                        },
                        new
                        {
                            Id = 19,
                            AppUserId = 19
                        },
                        new
                        {
                            Id = 20,
                            AppUserId = 20
                        },
                        new
                        {
                            Id = 21,
                            AppUserId = 21
                        },
                        new
                        {
                            Id = 22,
                            AppUserId = 22
                        },
                        new
                        {
                            Id = 23,
                            AppUserId = 23
                        },
                        new
                        {
                            Id = 24,
                            AppUserId = 24
                        },
                        new
                        {
                            Id = 25,
                            AppUserId = 25
                        },
                        new
                        {
                            Id = 26,
                            AppUserId = 26
                        },
                        new
                        {
                            Id = 27,
                            AppUserId = 27
                        },
                        new
                        {
                            Id = 28,
                            AppUserId = 28
                        },
                        new
                        {
                            Id = 29,
                            AppUserId = 29
                        },
                        new
                        {
                            Id = 30,
                            AppUserId = 30
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.SystemWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemWallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherProfileId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherProfileId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("TeacherEnrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("TeacherProfiles");

                    b.HasData(
                        new
                        {
                            Id = 31,
                            AppUserId = 31
                        },
                        new
                        {
                            Id = 32,
                            AppUserId = 32
                        },
                        new
                        {
                            Id = 33,
                            AppUserId = 33
                        },
                        new
                        {
                            Id = 34,
                            AppUserId = 34
                        },
                        new
                        {
                            Id = 35,
                            AppUserId = 35
                        },
                        new
                        {
                            Id = 36,
                            AppUserId = 36
                        },
                        new
                        {
                            Id = 37,
                            AppUserId = 37
                        },
                        new
                        {
                            Id = 38,
                            AppUserId = 38
                        },
                        new
                        {
                            Id = 39,
                            AppUserId = 39
                        },
                        new
                        {
                            Id = 40,
                            AppUserId = 40
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Room")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("YogaClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Name = "Class1",
                            Size = 19,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Name = "Class2",
                            Size = 18,
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Name = "Class3",
                            Size = 17,
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            Name = "Class4",
                            Size = 16,
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            Name = "Class5",
                            Size = 15,
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            Name = "Class6",
                            Size = 14,
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            Name = "Class7",
                            Size = 13,
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            Name = "Class8",
                            Size = 12,
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            Name = "Class9",
                            Size = 11,
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            Name = "Class10",
                            Size = 10,
                            Status = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherProfileTimeSlot", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("AvailableSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", null)
                        .WithMany()
                        .HasForeignKey("AvailableTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlotYogaClass", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("TimeSlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", null)
                        .WithMany()
                        .HasForeignKey("YogaClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Enrollment", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Member", "Member")
                        .WithMany("Enrollments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("Enrollments")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("Member")
                        .HasForeignKey("YogaManagement.Domain.Models.Member", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherEnrollment", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", "TeacherProfile")
                        .WithMany("TeacherEnrollments")
                        .HasForeignKey("TeacherProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("TeacherEnrollments")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherProfile");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("TeacherProfile")
                        .HasForeignKey("YogaManagement.Domain.Models.TeacherProfile", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Transaction", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Member", "Member")
                        .WithOne("Wallet")
                        .HasForeignKey("YogaManagement.Domain.Models.Wallet", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Course", "Course")
                        .WithMany("YogaClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppUser", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("TeacherProfile");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.Navigation("YogaClasses");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.Navigation("TeacherEnrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("TeacherEnrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
