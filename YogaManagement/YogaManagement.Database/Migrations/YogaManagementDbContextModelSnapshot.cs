// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YogaManagement.Database.EF;

#nullable disable

namespace YogaManagement.Database.Migrations
{
    [DbContext(typeof(YogaManagementDbContext))]
    partial class YogaManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 31,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 32,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 33,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 34,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 35,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 36,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 37,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 38,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 39,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 40,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 41,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 42,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 43,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 44,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 45,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 46,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeacherProfileTimeSlot", b =>
                {
                    b.Property<int>("AvailableSlotId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableTeacherId")
                        .HasColumnType("int");

                    b.HasKey("AvailableSlotId", "AvailableTeacherId");

                    b.HasIndex("AvailableTeacherId");

                    b.ToTable("TeacherProfileTimeSlot");
                });

            modelBuilder.Entity("TimeSlotYogaClass", b =>
                {
                    b.Property<int>("TimeSlotsId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassesId")
                        .HasColumnType("int");

                    b.HasKey("TimeSlotsId", "YogaClassesId");

                    b.HasIndex("YogaClassesId");

                    b.ToTable("TimeSlotYogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "MEMBER",
                            Name = "Member",
                            NormalizedName = "member"
                        },
                        new
                        {
                            Id = 2,
                            Description = "TEACHER",
                            Name = "Teacher",
                            NormalizedName = "teacher"
                        },
                        new
                        {
                            Id = 3,
                            Description = "STAFF",
                            Name = "Staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = 4,
                            Description = "ADMIN",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "c225d397-faa0-44ee-bff2-299bbb5972d8",
                            Email = "member1@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name1",
                            Lastname = "LastName1",
                            LockoutEnabled = false,
                            NormalizedEmail = "member1@gmail.com",
                            NormalizedUserName = "usermember1",
                            PasswordHash = "AQAAAAIAAYagAAAAEC4I1z7W5PrryTtQpXEownYVTHn4YtoDBLj5NeY9tBhixocEi99zeZBoGY/BkUCYuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "397090ce-6e96-49ae-8c1d-3bf5c5dbda31",
                            Email = "member2@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name2",
                            Lastname = "LastName2",
                            LockoutEnabled = false,
                            NormalizedEmail = "member2@gmail.com",
                            NormalizedUserName = "usermember2",
                            PasswordHash = "AQAAAAIAAYagAAAAECrmByJ5HQEsi1NA0zbQx8wcWuhDJwjUK6iSTabemEPc1eoHs93Niwqxq2QSEqjzRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "63962fdb-34d6-474d-8d48-e1a85dee0bcc",
                            Email = "member3@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name3",
                            Lastname = "LastName3",
                            LockoutEnabled = false,
                            NormalizedEmail = "member3@gmail.com",
                            NormalizedUserName = "usermember3",
                            PasswordHash = "AQAAAAIAAYagAAAAEHiQOmCGTFoeW10TNHcXhmnFFMYgs3ezyHHOxfqyU0EvkovJt5VKShuwZmdHN+Hadg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ac522d43-e48b-4b87-88fc-b427f52c7a2a",
                            Email = "member4@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name4",
                            Lastname = "LastName4",
                            LockoutEnabled = false,
                            NormalizedEmail = "member4@gmail.com",
                            NormalizedUserName = "usermember4",
                            PasswordHash = "AQAAAAIAAYagAAAAEEA9ICsPTpdVw3+1WAKOfXze3VZewOGH9dcEgQHplcAc/i1Ceqh5lseswKMfN3i6ag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "768375aa-cdb2-4694-bb17-9dfbe40339b0",
                            Email = "member5@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name5",
                            Lastname = "LastName5",
                            LockoutEnabled = false,
                            NormalizedEmail = "member5@gmail.com",
                            NormalizedUserName = "usermember5",
                            PasswordHash = "AQAAAAIAAYagAAAAEH59NshKAk3nsLazOcdYh/J5ykMjA0iO46lKX+V6SfOtVU8YXBQ2sLknPWsX99KwxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e35488f7-4f45-427f-af37-5747edfe6826",
                            Email = "member6@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name6",
                            Lastname = "LastName6",
                            LockoutEnabled = false,
                            NormalizedEmail = "member6@gmail.com",
                            NormalizedUserName = "usermember6",
                            PasswordHash = "AQAAAAIAAYagAAAAEFTWzT65nuClZt+RuXf7D0//n+ZWhkYJvj7ZejQdhZs8mB2PGnfosxgOoho5RBwn0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember6"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "9d8ed0af-af76-4952-bc42-9e25f072fd7c",
                            Email = "member7@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name7",
                            Lastname = "LastName7",
                            LockoutEnabled = false,
                            NormalizedEmail = "member7@gmail.com",
                            NormalizedUserName = "usermember7",
                            PasswordHash = "AQAAAAIAAYagAAAAEIc7boMFRhJIDl9daBi9qj/8Wl1w+8Ac17QhZ8GqNJLVcC0VA1i2wYuJZ3y+2TJ8Pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "5751bcfb-6cc1-40d5-a287-e9a84792086a",
                            Email = "member8@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name8",
                            Lastname = "LastName8",
                            LockoutEnabled = false,
                            NormalizedEmail = "member8@gmail.com",
                            NormalizedUserName = "usermember8",
                            PasswordHash = "AQAAAAIAAYagAAAAEFI8kIJ479z7cW8shBUsV07IanuV6XQUTDPqb3+zf0KbgAGMQTheYM/IWGs58/8Ozg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember8"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "55236333-a97d-4d5e-ba79-035aa8b361e5",
                            Email = "member9@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name9",
                            Lastname = "LastName9",
                            LockoutEnabled = false,
                            NormalizedEmail = "member9@gmail.com",
                            NormalizedUserName = "usermember9",
                            PasswordHash = "AQAAAAIAAYagAAAAEM8s8tLv0k1DJ6FE8wfhC2sS4oG1vt1C8D6BDDqBMfAYhBcCWT2AwwPSYhK1tXeAmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember9"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "a2908bc9-8030-4434-b6cc-c53815de5a61",
                            Email = "member10@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name10",
                            Lastname = "LastName10",
                            LockoutEnabled = false,
                            NormalizedEmail = "member10@gmail.com",
                            NormalizedUserName = "usermember10",
                            PasswordHash = "AQAAAAIAAYagAAAAECamzwy9zOyly1nw4fkWprYodiwFn5FaDuNG8+FivxJeCk25/X0BeMiOhTsIQk1OEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember10"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "81087c83-f45b-468d-a35a-1a058153a533",
                            Email = "member11@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name11",
                            Lastname = "LastName11",
                            LockoutEnabled = false,
                            NormalizedEmail = "member11@gmail.com",
                            NormalizedUserName = "usermember11",
                            PasswordHash = "AQAAAAIAAYagAAAAED2rvqHpKt7yPHhsNvsiuK18mvF+fDTj+Dc0E4fn1ouE0cMPc/eQrDAbhIYrR6p2yA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember11"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "c194ea3d-7f83-4b69-a7e5-a7ffc3e583e1",
                            Email = "member12@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name12",
                            Lastname = "LastName12",
                            LockoutEnabled = false,
                            NormalizedEmail = "member12@gmail.com",
                            NormalizedUserName = "usermember12",
                            PasswordHash = "AQAAAAIAAYagAAAAEI/Wr0ubRTex7BQHeEcdd1Dwq0JzBSa/TJinhKBuY72V2pl3xiYZESRSa8Wq8AzmYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember12"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "cffd9ed4-a7b7-46ce-9bad-d8a54b4dfe2c",
                            Email = "member13@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name13",
                            Lastname = "LastName13",
                            LockoutEnabled = false,
                            NormalizedEmail = "member13@gmail.com",
                            NormalizedUserName = "usermember13",
                            PasswordHash = "AQAAAAIAAYagAAAAEMUiRr1ptljIHndrHRrMtRW3FmUkQm5YKHvhsImcP+abeq1cFVcVP8ui34bz2YCdvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember13"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "18689702-db88-4c2e-8ac8-219d128de8a9",
                            Email = "member14@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name14",
                            Lastname = "LastName14",
                            LockoutEnabled = false,
                            NormalizedEmail = "member14@gmail.com",
                            NormalizedUserName = "usermember14",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGc9iJjlV+Sr0dlm8+/zm5neXkyC4OSXp38BD66xCqsScpGlHuBojR8y7oH0vDbpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember14"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "66042d8a-40bc-4ae4-bb5b-42c1d385eb14",
                            Email = "member15@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name15",
                            Lastname = "LastName15",
                            LockoutEnabled = false,
                            NormalizedEmail = "member15@gmail.com",
                            NormalizedUserName = "usermember15",
                            PasswordHash = "AQAAAAIAAYagAAAAEO7d30fa9Kj1EjrmeSswU2dq4uFu5X6N8E5GqSVZ+zIuO8y7nRMpqCfbcmXxnpp1/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember15"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "a2c29440-23b0-41f0-bb12-db9f32f0ed15",
                            Email = "member16@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name16",
                            Lastname = "LastName16",
                            LockoutEnabled = false,
                            NormalizedEmail = "member16@gmail.com",
                            NormalizedUserName = "usermember16",
                            PasswordHash = "AQAAAAIAAYagAAAAEFOTcfmjog2gJkEtLLcNvLTQt2CYHAxVXxpx42p4Qtx0RSN6UIg6rQyLNXCVp9svlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember16"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "81c71f8d-094d-4517-8cf4-ddd664094c5c",
                            Email = "member17@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name17",
                            Lastname = "LastName17",
                            LockoutEnabled = false,
                            NormalizedEmail = "member17@gmail.com",
                            NormalizedUserName = "usermember17",
                            PasswordHash = "AQAAAAIAAYagAAAAEBaTTbrkRnNGRtLlP5gipt2LEqLILcQUUHitf/vnPoiOXsRz4CLhsTpI7frrQ0hszA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember17"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "348dc881-054b-4507-9af4-e9f8ea95abea",
                            Email = "member18@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name18",
                            Lastname = "LastName18",
                            LockoutEnabled = false,
                            NormalizedEmail = "member18@gmail.com",
                            NormalizedUserName = "usermember18",
                            PasswordHash = "AQAAAAIAAYagAAAAENUKJHiMVTvoBrve58P7Usm5vf9eag6lXcCNOdLHrrdhRZ88FLOovIz2eIEQmY6flQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember18"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "fb8e08ca-1a47-422d-81c0-2e6b8a1e228a",
                            Email = "member19@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name19",
                            Lastname = "LastName19",
                            LockoutEnabled = false,
                            NormalizedEmail = "member19@gmail.com",
                            NormalizedUserName = "usermember19",
                            PasswordHash = "AQAAAAIAAYagAAAAEFg8pHmjRVWHaNUyBJfTkkHBqri2KMZFQRORVMQPcSas2A/31A+3o5oEwVbzjJl56A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember19"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "281f458b-5982-4376-b050-0197e89c81a5",
                            Email = "member20@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name20",
                            Lastname = "LastName20",
                            LockoutEnabled = false,
                            NormalizedEmail = "member20@gmail.com",
                            NormalizedUserName = "usermember20",
                            PasswordHash = "AQAAAAIAAYagAAAAEMdphJKBC1Neq/VXP21NaF1PmSvF8VFncjqa7KjeSwYG2w+Wrx1ge2Sj+/N3Tlkcrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember20"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "6d237951-46f7-40d7-ab10-96485e0f7235",
                            Email = "member21@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name21",
                            Lastname = "LastName21",
                            LockoutEnabled = false,
                            NormalizedEmail = "member21@gmail.com",
                            NormalizedUserName = "usermember21",
                            PasswordHash = "AQAAAAIAAYagAAAAEDX1QaXRliv6rMwglAkCqex38mxWX0yN/dUqX8Z1RuLG4mjxIQVHyosIr64ttGUdrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember21"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "390d8bea-77a4-4538-8217-0cab5b10bb66",
                            Email = "member22@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name22",
                            Lastname = "LastName22",
                            LockoutEnabled = false,
                            NormalizedEmail = "member22@gmail.com",
                            NormalizedUserName = "usermember22",
                            PasswordHash = "AQAAAAIAAYagAAAAEF15ZRSO8H6PzyrhuniVnDLILPBDtzVYNLn6y6JjoEKTbxmps0wIT9nfGzCxzBOy3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember22"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "60f3e8a6-6ef5-4ba9-b5ca-aa68dd100d39",
                            Email = "member23@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name23",
                            Lastname = "LastName23",
                            LockoutEnabled = false,
                            NormalizedEmail = "member23@gmail.com",
                            NormalizedUserName = "usermember23",
                            PasswordHash = "AQAAAAIAAYagAAAAEJp2Dca5JgV9fn+qCDpY15PgE+UqfqNwcWNU7nDbHXYZ52XfrcbBmq54no9DoV1Icw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember23"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "40097d09-03fe-4b69-880c-0954f4cd2ff7",
                            Email = "member24@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name24",
                            Lastname = "LastName24",
                            LockoutEnabled = false,
                            NormalizedEmail = "member24@gmail.com",
                            NormalizedUserName = "usermember24",
                            PasswordHash = "AQAAAAIAAYagAAAAELXL6sfHEwFXsMBHP4tPMF8wfKKPvsrZSdj5QwuH7AKYNd8/HDwZ7AnkthZCDR+w9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember24"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e5d57c93-c97a-4318-ac03-c9dfde669c37",
                            Email = "member25@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name25",
                            Lastname = "LastName25",
                            LockoutEnabled = false,
                            NormalizedEmail = "member25@gmail.com",
                            NormalizedUserName = "usermember25",
                            PasswordHash = "AQAAAAIAAYagAAAAEG4RiECn/2zy6BUDLcm3ui4mIUj8nXfm/SPOiTms0hQUKfVFDsnQAbHQszosG8bVOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember25"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "9b10fc5f-456a-4ad3-b628-73f69a61b655",
                            Email = "member26@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name26",
                            Lastname = "LastName26",
                            LockoutEnabled = false,
                            NormalizedEmail = "member26@gmail.com",
                            NormalizedUserName = "usermember26",
                            PasswordHash = "AQAAAAIAAYagAAAAEAgynsZXMutrBa0iWvDfp61bLK2JzExL1X4gNnzJZ3myJRRxp9ykwbmJ13g7PvxbZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember26"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "52cb90ba-2500-4c15-b812-a9ecfd444b6c",
                            Email = "member27@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name27",
                            Lastname = "LastName27",
                            LockoutEnabled = false,
                            NormalizedEmail = "member27@gmail.com",
                            NormalizedUserName = "usermember27",
                            PasswordHash = "AQAAAAIAAYagAAAAEHnKj1nbl4xSNtm86miSFzQ9Ei8fVqzNgh4OfN3bNgNA8RWN5g96dOvxIt4x/DawcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember27"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "59c40c2e-c357-42c0-8049-e49ed0de33bc",
                            Email = "member28@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name28",
                            Lastname = "LastName28",
                            LockoutEnabled = false,
                            NormalizedEmail = "member28@gmail.com",
                            NormalizedUserName = "usermember28",
                            PasswordHash = "AQAAAAIAAYagAAAAEAaz59uLgCWNBcCUFWx0UJO3tdGwLAGo/13HfgLseYz9sXWJurdUwrLhHhuK9xEtgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember28"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "04d46b7d-cda1-427d-a3c1-ff0b6de9e213",
                            Email = "member29@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name29",
                            Lastname = "LastName29",
                            LockoutEnabled = false,
                            NormalizedEmail = "member29@gmail.com",
                            NormalizedUserName = "usermember29",
                            PasswordHash = "AQAAAAIAAYagAAAAEAlkeEppFoJ7OqaoQiSvtsE5Keyv8QJ6ZBHCtOmZeHYnfwf5hYjdi1aZ0hdOo7xhHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember29"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "fad9af76-5774-42f7-82b5-e83a7361fbc7",
                            Email = "member30@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name30",
                            Lastname = "LastName30",
                            LockoutEnabled = false,
                            NormalizedEmail = "member30@gmail.com",
                            NormalizedUserName = "usermember30",
                            PasswordHash = "AQAAAAIAAYagAAAAEKb3b/X+2VAbzDZx1jncxE960117liQxxDNtDsJmheQrI/I36SAmAtWZf/Q45B/lMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserMember30"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "15b77a1a-537d-4d67-b871-5dd8d1a5b517",
                            Email = "teacher31@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name31",
                            Lastname = "LastName31",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher31@gmail.com",
                            NormalizedUserName = "userteacher31",
                            PasswordHash = "AQAAAAIAAYagAAAAEGPjuYEysmemr9/uAABWm2UkzwI0TJ1WXtD5tqJKaVtLAkVHwZsITpjjU17ebwFHJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher31"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "a2f16274-8698-4815-8a14-8bfdfd7b824f",
                            Email = "teacher32@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name32",
                            Lastname = "LastName32",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher32@gmail.com",
                            NormalizedUserName = "userteacher32",
                            PasswordHash = "AQAAAAIAAYagAAAAEMprAwdWHiK8jeNgLvyaWX0tK8ZiLdRKvY0MrrE1ipnIp1KMrg7T48nYQ2D6ASWOvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher32"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "469fbc0e-8ec8-48bd-8b64-26669a00ddfd",
                            Email = "teacher33@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name33",
                            Lastname = "LastName33",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher33@gmail.com",
                            NormalizedUserName = "userteacher33",
                            PasswordHash = "AQAAAAIAAYagAAAAEJBHyV12MZKPKLXKuW1BdG4juUQt4QdO4FdzyGfxeCbdjodux+MA17jnXPqbHLLA4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher33"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "bb50f826-1d9b-40b8-9708-a26060d7f102",
                            Email = "teacher34@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name34",
                            Lastname = "LastName34",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher34@gmail.com",
                            NormalizedUserName = "userteacher34",
                            PasswordHash = "AQAAAAIAAYagAAAAENgzN/mACcuDZEAaRDngiqsh2EQWtM4wfWzFs6qtdsRQa1pZcvkHJ05uiT10q1lzAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher34"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "afbe7b6a-6cdc-4d99-a191-bcf7ec96ee79",
                            Email = "teacher35@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name35",
                            Lastname = "LastName35",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher35@gmail.com",
                            NormalizedUserName = "userteacher35",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWXFOGVSGOrLKrF6O+vyzgRhx70JlcO6+j+nZiL7KNA2pUdKLXVS7jjtht3ZZ9oPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher35"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "1cb04979-21f2-4247-b2ad-008a7f176c58",
                            Email = "teacher36@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name36",
                            Lastname = "LastName36",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher36@gmail.com",
                            NormalizedUserName = "userteacher36",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZtLDXgjTYOmlBKxT2VlI1ibKt3wv1PFm79+p+eXa/gRBUXalL9glflkxpnihe3kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher36"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "7015266c-6bb5-4ba8-a93f-a02d621867d0",
                            Email = "teacher37@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name37",
                            Lastname = "LastName37",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher37@gmail.com",
                            NormalizedUserName = "userteacher37",
                            PasswordHash = "AQAAAAIAAYagAAAAEO0z4bFoUU5DXJOf2+EQW/XV3/ZOQiwJL2qhUES56gJ6eE6qUhT7twc5FcAR9J9YIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher37"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "fece090f-d940-433d-824f-096d9427a733",
                            Email = "teacher38@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name38",
                            Lastname = "LastName38",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher38@gmail.com",
                            NormalizedUserName = "userteacher38",
                            PasswordHash = "AQAAAAIAAYagAAAAEOzYQbsPQAF0vaMsuXOiTuRY7aGf8GmahljqFuBPVRRf2iaRczujQ8g+AQeuBocWqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher38"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "944840a2-1d43-468a-ac45-1995acd745b5",
                            Email = "teacher39@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name39",
                            Lastname = "LastName39",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher39@gmail.com",
                            NormalizedUserName = "userteacher39",
                            PasswordHash = "AQAAAAIAAYagAAAAEE2ha3K53RWQrJGVAUibhFKSx291Cc7sJJhKnUk/QOo2NszOKr3g6WZElYtYgSK00A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher39"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "bb6c5ee0-f5fe-419b-bb29-7f440614665a",
                            Email = "teacher40@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name40",
                            Lastname = "LastName40",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher40@gmail.com",
                            NormalizedUserName = "userteacher40",
                            PasswordHash = "AQAAAAIAAYagAAAAEIAymWo80Ol6ieFhlaqdodc90Gx7t5rpbd3iY6sP9gMHTvabL7enVvm03liaZGKCxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserTeacher40"
                        },
                        new
                        {
                            Id = 41,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ff9af491-28bf-4571-93eb-b496012604c5",
                            Email = "staff41@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name41",
                            Lastname = "LastName41",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff41@gmail.com",
                            NormalizedUserName = "userstaff41",
                            PasswordHash = "AQAAAAIAAYagAAAAECdhqOQGBaMdtSPFCvihJZ7FbDkqvuyKw2uNu++BXy6w2BqHDxSmKddYwMFCQ3/a6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff41"
                        },
                        new
                        {
                            Id = 42,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e905d94d-18ff-432a-b17c-a4bd26bb6794",
                            Email = "staff42@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name42",
                            Lastname = "LastName42",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff42@gmail.com",
                            NormalizedUserName = "userstaff42",
                            PasswordHash = "AQAAAAIAAYagAAAAEEwCza9KTEPaE16H6jluYNmZaZ2Wd7EpQb0vX9v9v2ueKefZIjhgnUiDSaKblN0Axg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff42"
                        },
                        new
                        {
                            Id = 43,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "98e9dc71-fffa-4874-9df1-01f5be68d4c0",
                            Email = "staff43@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name43",
                            Lastname = "LastName43",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff43@gmail.com",
                            NormalizedUserName = "userstaff43",
                            PasswordHash = "AQAAAAIAAYagAAAAEIHrVJRwlHRBGIE84Ua3WclQWynx2I0fmrB8KH9w/Dcn/0eJSR7xhwLMhyJAhcmnBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff43"
                        },
                        new
                        {
                            Id = 44,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "19a6a070-ea78-49cf-9d3b-7c29ac9d549f",
                            Email = "staff44@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name44",
                            Lastname = "LastName44",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff44@gmail.com",
                            NormalizedUserName = "userstaff44",
                            PasswordHash = "AQAAAAIAAYagAAAAEHn6YKRQYrcP9YkJd4Qf5Lpf5Hl527el8vDburGae3eDEKhgmMtlJkIa+xf3d2lvXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff44"
                        },
                        new
                        {
                            Id = 45,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "f2d285a8-0ca7-483c-a0f5-99ba2c842e76",
                            Email = "staff45@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name45",
                            Lastname = "LastName45",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff45@gmail.com",
                            NormalizedUserName = "userstaff45",
                            PasswordHash = "AQAAAAIAAYagAAAAEDh1JOqxnce9h40+Ohd3PCe0MdH3uoQHPeiRAPQxh4oQdrXBkt0V+Bby6davZ+6TNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserStaff45"
                        },
                        new
                        {
                            Id = 46,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "782038e0-ebb1-4b64-b735-8545c6cfc3f5",
                            Email = "admin46@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name46",
                            Lastname = "LastName46",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin46@gmail.com",
                            NormalizedUserName = "useradmin46",
                            PasswordHash = "AQAAAAIAAYagAAAAEK4Rr5fv7J3ltPFenMgcpwu5W0jpOhXgopGXjCHQk3GC4Ka7Yf4B0CH6Hw8ZUQVw0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "UserAdmin46"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Category1"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Category2"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Category3"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Category4"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Category5"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Name = "Category6"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Name = "Category7"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            Name = "Category8"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            Name = "Category9"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            Name = "Category10"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnddDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Yoga course number 1",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course1",
                            Price = 100.0,
                            StartDate = new DateTime(2023, 6, 20, 23, 14, 0, 584, DateTimeKind.Local).AddTicks(6358)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Yoga course number 2",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course2",
                            Price = 200.0,
                            StartDate = new DateTime(2023, 6, 20, 23, 14, 0, 584, DateTimeKind.Local).AddTicks(6378)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Yoga course number 3",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course3",
                            Price = 300.0,
                            StartDate = new DateTime(2023, 6, 20, 23, 14, 0, 584, DateTimeKind.Local).AddTicks(6382)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Yoga course number 4",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course4",
                            Price = 400.0,
                            StartDate = new DateTime(2023, 6, 20, 23, 14, 0, 584, DateTimeKind.Local).AddTicks(6386)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Description = "Yoga course number 5",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course5",
                            Price = 500.0,
                            StartDate = new DateTime(2023, 6, 20, 23, 14, 0, 584, DateTimeKind.Local).AddTicks(6389)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Description = "Yoga course number 6",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course6",
                            Price = 600.0,
                            StartDate = new DateTime(2023, 6, 20, 23, 14, 0, 584, DateTimeKind.Local).AddTicks(6393)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Description = "Yoga course number 7",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course7",
                            Price = 700.0,
                            StartDate = new DateTime(2023, 6, 20, 23, 14, 0, 584, DateTimeKind.Local).AddTicks(6396)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            Description = "Yoga course number 8",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course8",
                            Price = 800.0,
                            StartDate = new DateTime(2023, 6, 20, 23, 14, 0, 584, DateTimeKind.Local).AddTicks(6400)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Description = "Yoga course number 9",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course9",
                            Price = 900.0,
                            StartDate = new DateTime(2023, 6, 20, 23, 14, 0, 584, DateTimeKind.Local).AddTicks(6403)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            Description = "Yoga course number 10",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course10",
                            Price = 1000.0,
                            StartDate = new DateTime(2023, 6, 20, 23, 14, 0, 584, DateTimeKind.Local).AddTicks(6408)
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Enrollment", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "YogaClassId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("MemberLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 2,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 3,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 4,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 5,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 6,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 7,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 8,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 9,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 10,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 11,
                            AppUserId = 11,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 12,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 13,
                            AppUserId = 13,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 14,
                            AppUserId = 14,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 15,
                            AppUserId = 15,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 16,
                            AppUserId = 16,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 17,
                            AppUserId = 17,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 18,
                            AppUserId = 18,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 19,
                            AppUserId = 19,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 20,
                            AppUserId = 20,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 21,
                            AppUserId = 21,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 22,
                            AppUserId = 22,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 23,
                            AppUserId = 23,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 24,
                            AppUserId = 24,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 25,
                            AppUserId = 25,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 26,
                            AppUserId = 26,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 27,
                            AppUserId = 27,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 28,
                            AppUserId = 28,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 29,
                            AppUserId = 29,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 30,
                            AppUserId = 30,
                            MemberLevel = 0
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.SystemWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemWallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherProfileId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherProfileId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("TeacherEnrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("TeacherProfiles");

                    b.HasData(
                        new
                        {
                            Id = 31,
                            AppUserId = 31
                        },
                        new
                        {
                            Id = 32,
                            AppUserId = 32
                        },
                        new
                        {
                            Id = 33,
                            AppUserId = 33
                        },
                        new
                        {
                            Id = 34,
                            AppUserId = 34
                        },
                        new
                        {
                            Id = 35,
                            AppUserId = 35
                        },
                        new
                        {
                            Id = 36,
                            AppUserId = 36
                        },
                        new
                        {
                            Id = 37,
                            AppUserId = 37
                        },
                        new
                        {
                            Id = 38,
                            AppUserId = 38
                        },
                        new
                        {
                            Id = 39,
                            AppUserId = 39
                        },
                        new
                        {
                            Id = 40,
                            AppUserId = 40
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Room")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 12,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 13,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 14,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 15,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 16,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 17,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 21,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 22,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 23,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 24,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 25,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 26,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 27,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 31,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 32,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 33,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 34,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 35,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 36,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 37,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 41,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 42,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 43,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 44,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 45,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 46,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 47,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 51,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 52,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 53,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 54,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 55,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 56,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 57,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 61,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 62,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 63,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 64,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 65,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 66,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 67,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 71,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 72,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 73,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 74,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 75,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 76,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 77,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("YogaClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Name = "Class1",
                            Size = 19,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Name = "Class2",
                            Size = 18,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Name = "Class3",
                            Size = 17,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            Name = "Class4",
                            Size = 16,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            Name = "Class5",
                            Size = 15,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            Name = "Class6",
                            Size = 14,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            Name = "Class7",
                            Size = 13,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            Name = "Class8",
                            Size = 12,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            Name = "Class9",
                            Size = 11,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            Name = "Class10",
                            Size = 10,
                            YogaClassStatus = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherProfileTimeSlot", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("AvailableSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", null)
                        .WithMany()
                        .HasForeignKey("AvailableTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlotYogaClass", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("TimeSlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", null)
                        .WithMany()
                        .HasForeignKey("YogaClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Enrollment", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Member", "Member")
                        .WithMany("Enrollments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("Enrollments")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("Member")
                        .HasForeignKey("YogaManagement.Domain.Models.Member", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherEnrollment", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", "TeacherProfile")
                        .WithMany("TeacherEnrollments")
                        .HasForeignKey("TeacherProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("TeacherEnrollments")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherProfile");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("TeacherProfile")
                        .HasForeignKey("YogaManagement.Domain.Models.TeacherProfile", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Transaction", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Member", "Member")
                        .WithOne("Wallet")
                        .HasForeignKey("YogaManagement.Domain.Models.Wallet", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Course", "Course")
                        .WithMany("YogaClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppUser", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("TeacherProfile");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.Navigation("YogaClasses");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.Navigation("TeacherEnrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("TeacherEnrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
