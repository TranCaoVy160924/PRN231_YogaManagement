// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YogaManagement.Database.EF;

#nullable disable

namespace YogaManagement.Database.Migrations
{
    [DbContext(typeof(YogaManagementDbContext))]
    partial class YogaManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 31,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 32,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 33,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 34,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 35,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 36,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 37,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 38,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 39,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 40,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 41,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 42,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 43,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 44,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 45,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 46,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeacherProfileTimeSlot", b =>
                {
                    b.Property<int>("AvailableSlotId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableTeacherId")
                        .HasColumnType("int");

                    b.HasKey("AvailableSlotId", "AvailableTeacherId");

                    b.HasIndex("AvailableTeacherId");

                    b.ToTable("TeacherProfileTimeSlot");
                });

            modelBuilder.Entity("TimeSlotYogaClass", b =>
                {
                    b.Property<int>("TimeSlotsId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassesId")
                        .HasColumnType("int");

                    b.HasKey("TimeSlotsId", "YogaClassesId");

                    b.HasIndex("YogaClassesId");

                    b.ToTable("TimeSlotYogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "MEMBER",
                            Name = "Member",
                            NormalizedName = "member"
                        },
                        new
                        {
                            Id = 2,
                            Description = "TEACHER",
                            Name = "Teacher",
                            NormalizedName = "teacher"
                        },
                        new
                        {
                            Id = 3,
                            Description = "STAFF",
                            Name = "Staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = 4,
                            Description = "ADMIN",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "139f5ba1-9386-4f64-acbd-b93e11c00372",
                            Email = "member1@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name1",
                            Lastname = "LastName1",
                            LockoutEnabled = false,
                            NormalizedEmail = "member1@gmail.com",
                            NormalizedUserName = "member1@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDHzNzKumH9jBeMK+9DvRs+Wm8eaBN5vH3uKXCA+D6UalsaL24ZnKyoXNaH3Ydn0mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member1@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "5b858200-0343-4f81-9e4c-7b84ea981f10",
                            Email = "member2@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name2",
                            Lastname = "LastName2",
                            LockoutEnabled = false,
                            NormalizedEmail = "member2@gmail.com",
                            NormalizedUserName = "member2@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKLSv+HdTICy5RdgNFfd/nAwSvLpkPhGrWktsLiSLvHtS3MgjsBCoOSMdspOHz5Prg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member2@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "b2dad1b7-1d73-4c40-952f-fb30458fc569",
                            Email = "member3@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name3",
                            Lastname = "LastName3",
                            LockoutEnabled = false,
                            NormalizedEmail = "member3@gmail.com",
                            NormalizedUserName = "member3@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEMCuHvwqriwj496mCcP/9YpmHxrqtSEv+Rchmf+9TcuzUMceshVi6J/BaaAvJ7WxCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member3@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "5c050754-8b2e-4799-8b42-6f4bf66d619e",
                            Email = "member4@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name4",
                            Lastname = "LastName4",
                            LockoutEnabled = false,
                            NormalizedEmail = "member4@gmail.com",
                            NormalizedUserName = "member4@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENGIu/10hGzInTXhJ57TjXf8A/smX0TC/fC3XnClsaQLPH0lkzVHMKmExzjvkSeLCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member4@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "b77b6cb4-c1d7-44af-8909-0090d7820578",
                            Email = "member5@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name5",
                            Lastname = "LastName5",
                            LockoutEnabled = false,
                            NormalizedEmail = "member5@gmail.com",
                            NormalizedUserName = "member5@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEEyEHDEzsnEhudKjNJIdCWPQE9uj18lhHW3aXz7rHKLrziawl+eI3xhhgR1avaXvXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member5@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "1b015ef8-b1be-41f2-9983-9aae499c3dad",
                            Email = "member6@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name6",
                            Lastname = "LastName6",
                            LockoutEnabled = false,
                            NormalizedEmail = "member6@gmail.com",
                            NormalizedUserName = "member6@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELEzJgfgo2nOWXJqmw36h9HiOkzL/rlQb+l0TOJ7iA264XeaHQX1eVxxGH1X9ari3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member6@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e86d0abf-4a6b-4c28-9512-39a046f8dda1",
                            Email = "member7@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name7",
                            Lastname = "LastName7",
                            LockoutEnabled = false,
                            NormalizedEmail = "member7@gmail.com",
                            NormalizedUserName = "member7@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEFrRAFqGHAYZUhmV1RbdEOvjkz2Icjey6iaJV0lYz8wd1XHmebBNfGVRdna9bUZa1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member7@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "74d9ecb0-2d8c-46eb-ad23-08010f345fb9",
                            Email = "member8@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name8",
                            Lastname = "LastName8",
                            LockoutEnabled = false,
                            NormalizedEmail = "member8@gmail.com",
                            NormalizedUserName = "member8@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIObcpvTNl1JPQiXReo40GM/MjMnwk3YU2ScSS42GOj9nxEg3f3X1sTXS7ibeK5whA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member8@gmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "68ab2bc7-bf62-4a9a-9db2-819c493865c9",
                            Email = "member9@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name9",
                            Lastname = "LastName9",
                            LockoutEnabled = false,
                            NormalizedEmail = "member9@gmail.com",
                            NormalizedUserName = "member9@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEADkVz/RbBC8UadoONH/gnPc/LxxxL7x5FQ6D4QlO2KecHz0kfC3BddkK0AYEE2uUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member9@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "c9929512-5be4-4563-83a2-e40602876023",
                            Email = "member10@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name10",
                            Lastname = "LastName10",
                            LockoutEnabled = false,
                            NormalizedEmail = "member10@gmail.com",
                            NormalizedUserName = "member10@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBEzc5th+2wsvWGdabMiQMd57E1dqIG0kdqGgDbSONOCg2WNi21PCOwwXeT6KHMD/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member10@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "c6dd02bf-820c-45e2-84d2-773016ec62e8",
                            Email = "member11@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name11",
                            Lastname = "LastName11",
                            LockoutEnabled = false,
                            NormalizedEmail = "member11@gmail.com",
                            NormalizedUserName = "member11@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDrRInok0ZY7UnmLIaINqhGuI1ghrAn/K/yC5UkXDcKVJfto/zmsLt3gbrVvRMVy4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member11@gmail.com"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "14e545a9-b44e-43a8-a023-2d6c35bd77be",
                            Email = "member12@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name12",
                            Lastname = "LastName12",
                            LockoutEnabled = false,
                            NormalizedEmail = "member12@gmail.com",
                            NormalizedUserName = "member12@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEMrDF8bEzcaBBC99QB+RsYJMonJJUqdJ6YLlpDhTEwIdtQCYxxjoWisOnP3n78DJUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member12@gmail.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "3706e1bb-7b72-4436-9e1d-3e9f4d6dc5ab",
                            Email = "member13@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name13",
                            Lastname = "LastName13",
                            LockoutEnabled = false,
                            NormalizedEmail = "member13@gmail.com",
                            NormalizedUserName = "member13@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEC4Nay8R0wSpqFI6ZiEbKqKYKTVcMUXg5O2xktuwb+ieFV+D/M+7ks+unNxKDhEK0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member13@gmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "405fafae-c0d5-44c8-b81d-3c7b6bfeaad1",
                            Email = "member14@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name14",
                            Lastname = "LastName14",
                            LockoutEnabled = false,
                            NormalizedEmail = "member14@gmail.com",
                            NormalizedUserName = "member14@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEA8JmgXu70lhgKx65FpA4ojMhhWz/2r+YTQLt/4utAlvFJw2OkIRb9mRrOXPleAJXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member14@gmail.com"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "531bb520-bb6b-43ec-a1df-3621afc0d8ec",
                            Email = "member15@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name15",
                            Lastname = "LastName15",
                            LockoutEnabled = false,
                            NormalizedEmail = "member15@gmail.com",
                            NormalizedUserName = "member15@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKv6JVBnm0nG22LHYVoBUUkFaSUTozMDN6O/FaC45/gfIzD9Ws/d+eHV9McCqcpZUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member15@gmail.com"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "70cfa7a5-0979-43bf-a1e0-3f73593f3471",
                            Email = "member16@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name16",
                            Lastname = "LastName16",
                            LockoutEnabled = false,
                            NormalizedEmail = "member16@gmail.com",
                            NormalizedUserName = "member16@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEAcQiUG4UjduehwHDXzEX1etjFdh2vsBWWU6imGl960au9A7oFcTbx+ZZM3HeiNF6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member16@gmail.com"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "5f3ac3c2-316a-4c95-9d87-de87999716e1",
                            Email = "member17@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name17",
                            Lastname = "LastName17",
                            LockoutEnabled = false,
                            NormalizedEmail = "member17@gmail.com",
                            NormalizedUserName = "member17@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEC19LhCQhUxV3xg/lBSvJluajg36qImf5dIfCHgrZIPaz94AWWqWqYl9AWzXg+mTFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member17@gmail.com"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "a0454a41-6e64-4660-a6e1-5f11ef7a1a3a",
                            Email = "member18@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name18",
                            Lastname = "LastName18",
                            LockoutEnabled = false,
                            NormalizedEmail = "member18@gmail.com",
                            NormalizedUserName = "member18@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIHsQJ/4KXsRI+rHEO3IUNZ58rtgI8G4iqz1m7fD2GZ6U/WPChBDhpkQVfXiGKJoFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member18@gmail.com"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "1e608faf-3497-44f9-99e5-373fa9acc4e6",
                            Email = "member19@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name19",
                            Lastname = "LastName19",
                            LockoutEnabled = false,
                            NormalizedEmail = "member19@gmail.com",
                            NormalizedUserName = "member19@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECSNsiNXEX9WsSdlfL3Jt5MALjlo6I87ShWDtzNA7zC6dmkrIooMeESFVEbYhbSKfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member19@gmail.com"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "aa70541b-c7a3-48e2-a7dd-621ad5480394",
                            Email = "member20@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name20",
                            Lastname = "LastName20",
                            LockoutEnabled = false,
                            NormalizedEmail = "member20@gmail.com",
                            NormalizedUserName = "member20@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7DMOD/0zG6EvL4VC/Srg5PVyR2oWneLSg4z9fZ24YxoHXryYQATosNsOBttt9WOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member20@gmail.com"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "0f71bd8a-b1a1-42ab-abfb-a0e2a7897805",
                            Email = "member21@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name21",
                            Lastname = "LastName21",
                            LockoutEnabled = false,
                            NormalizedEmail = "member21@gmail.com",
                            NormalizedUserName = "member21@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEFvEQKolouWnS1jn5HrgC8Y3c5ye6WXFl+f9HYLxyAK+8i5b5kqp7/Rc1kBPYoyoiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member21@gmail.com"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "74adf266-b3cc-489e-979a-37b6c5b6da85",
                            Email = "member22@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name22",
                            Lastname = "LastName22",
                            LockoutEnabled = false,
                            NormalizedEmail = "member22@gmail.com",
                            NormalizedUserName = "member22@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIgPxx3/9/u9aRBGnGIjIfG0L0gPhVou6z1gUBenx2e9WhyMCQegM/1C8+uIJ2BUhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member22@gmail.com"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "1762be2f-d356-40c7-9758-2f852d3151b9",
                            Email = "member23@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name23",
                            Lastname = "LastName23",
                            LockoutEnabled = false,
                            NormalizedEmail = "member23@gmail.com",
                            NormalizedUserName = "member23@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELNO9RyDoDepwBBpM9DCKUCWQIg0945HDG+p5CjvtyB26rJw2HZsEFDZHUZWnNDo5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member23@gmail.com"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d41db394-ffbc-4a57-97ae-7a0b6a4b3182",
                            Email = "member24@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name24",
                            Lastname = "LastName24",
                            LockoutEnabled = false,
                            NormalizedEmail = "member24@gmail.com",
                            NormalizedUserName = "member24@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEMMIS41881uaeq9QKd+8TD/dB9jBdMxDRGlVgaNOdiFhsH2k/bdxu+sHuTKnb+ub6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member24@gmail.com"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "a21a4ca0-95fe-41af-9138-3700843b8234",
                            Email = "member25@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name25",
                            Lastname = "LastName25",
                            LockoutEnabled = false,
                            NormalizedEmail = "member25@gmail.com",
                            NormalizedUserName = "member25@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEPKHttGWnYROeGosohIt5f7qK90Pvf1/YuCIr5RO/mzS1OfiXS8uNcnKFkwKesA/og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member25@gmail.com"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "649ccad2-ed51-4c53-a9a0-ec8c59ac36bd",
                            Email = "member26@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name26",
                            Lastname = "LastName26",
                            LockoutEnabled = false,
                            NormalizedEmail = "member26@gmail.com",
                            NormalizedUserName = "member26@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEPu300bCOb6L/Sgwo2w4Q2ia5jZ6QIASqpUpIqGAM1tiCstaX5MFSE8xbFNm4zp9Zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member26@gmail.com"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "25b192aa-b23d-4d63-9ade-957101920cc1",
                            Email = "member27@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name27",
                            Lastname = "LastName27",
                            LockoutEnabled = false,
                            NormalizedEmail = "member27@gmail.com",
                            NormalizedUserName = "member27@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENJDo8A0vamQrsqBcKaVzqJzvpQWOoYz3iv0NLNTYWb9NBAzSZJvUU9SOhj3mC3LDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member27@gmail.com"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "030219a6-930d-4188-860f-d61583065b06",
                            Email = "member28@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name28",
                            Lastname = "LastName28",
                            LockoutEnabled = false,
                            NormalizedEmail = "member28@gmail.com",
                            NormalizedUserName = "member28@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEAoINZ0eXEUTXhqywl0BlHdgASVbgPWOCeUCYYG1m3WzDMu9jR74aXq/irdYcDKlgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member28@gmail.com"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "73c1111e-1511-4747-bb42-b5b9e3ab91ba",
                            Email = "member29@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name29",
                            Lastname = "LastName29",
                            LockoutEnabled = false,
                            NormalizedEmail = "member29@gmail.com",
                            NormalizedUserName = "member29@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELfSRu3rZFqyzVYQ96Peks3eMpJgMwPDMlQ3wcnjbqYnLeMzx9LX48yg/mLC47bneA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member29@gmail.com"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "b3389dd1-aade-4f2d-9e93-b5aea431f17b",
                            Email = "member30@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name30",
                            Lastname = "LastName30",
                            LockoutEnabled = false,
                            NormalizedEmail = "member30@gmail.com",
                            NormalizedUserName = "member30@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9PZOjIuDa+EbLkN+4WptkyiEI6B3ozGZgvQJm3umqwD8ltwlZl9rDuYQHlCMCM4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member30@gmail.com"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "2c59bf3d-ede7-4a8f-9c58-8e8e58fe0b5c",
                            Email = "teacher31@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name31",
                            Lastname = "LastName31",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher31@gmail.com",
                            NormalizedUserName = "teacher31@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDs6j7IsJRqcUnIsuuVqNuxtquoxn54XUHA8ldIg4mlkwNZSd9j4bbiA9z7pQLTl2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher31@gmail.com"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "34ad4ad0-8a7b-42d2-8e8d-ef99dedbad25",
                            Email = "teacher32@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name32",
                            Lastname = "LastName32",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher32@gmail.com",
                            NormalizedUserName = "teacher32@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEOvWDh4YRJS83iUTZzl1o1uau8KG227D4iKEm3TQK7lUhB8jfMF+EQwdAmKsYP4DYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher32@gmail.com"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e339e708-f501-4096-912e-71b6d7aceb8b",
                            Email = "teacher33@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name33",
                            Lastname = "LastName33",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher33@gmail.com",
                            NormalizedUserName = "teacher33@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEGI/yDcc2IQVOYcJC/HpbcJ5CoZZHTFNJO4lQ3LLd1RMjMWQJodmmTrqWo2XLRdqUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher33@gmail.com"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "2230e46e-5cf1-4619-8417-f97b50c5ec3f",
                            Email = "teacher34@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name34",
                            Lastname = "LastName34",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher34@gmail.com",
                            NormalizedUserName = "teacher34@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECxV+BmIwqvduOEj9fw1i9isgrAPb5DkD/ZWcs6LhzLhGbyEORgEIWAdDTL9mDH7Gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher34@gmail.com"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "82580fb5-46c4-4192-ae7b-9b919f5b99d2",
                            Email = "teacher35@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name35",
                            Lastname = "LastName35",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher35@gmail.com",
                            NormalizedUserName = "teacher35@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIsR/fxNQEegFhJ2dY6upwPXbHim0+SrUERi2xhdYpQfc9VaPwfig3vuqySLK6yKJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher35@gmail.com"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "9ac40ff1-1175-45c8-87f2-02dc811df5c9",
                            Email = "teacher36@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name36",
                            Lastname = "LastName36",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher36@gmail.com",
                            NormalizedUserName = "teacher36@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEINEp9vLoNBIHn3ky4CTr8qjpdMimDnXR/2kGxSFXBJT0Q6PlK4k8Fd/ytFP7ylSDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher36@gmail.com"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "e2bfe579-04d0-41b4-a408-2047d42697cf",
                            Email = "teacher37@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name37",
                            Lastname = "LastName37",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher37@gmail.com",
                            NormalizedUserName = "teacher37@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEPBfXbBzx23G8ZMkna9oy6wwxty54QUnGXmZD/e4Vd0WXYIaCYTexPldscWwRqRHKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher37@gmail.com"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ea5445c7-b828-44f7-bf41-e518cdc32818",
                            Email = "teacher38@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name38",
                            Lastname = "LastName38",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher38@gmail.com",
                            NormalizedUserName = "teacher38@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENYcW1yi07X/mJzUz+FZw+g4SZIHqQwzF8vpp6Vl6Bf/j1BPOET8waG3bTi1H/n1iA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher38@gmail.com"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "4d351ff8-eaa5-4435-ad47-45235d0a2b97",
                            Email = "teacher39@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name39",
                            Lastname = "LastName39",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher39@gmail.com",
                            NormalizedUserName = "teacher39@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELZHYm5XDHnPn1PkfGKRWCyjMBG7q0PNWbVQEifJ0ypTmqSAoaIr1Orl3ElLC78L1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher39@gmail.com"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "8d2528f6-3aa4-4aad-9d12-c6936406f3ad",
                            Email = "teacher40@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name40",
                            Lastname = "LastName40",
                            LockoutEnabled = false,
                            NormalizedEmail = "teacher40@gmail.com",
                            NormalizedUserName = "teacher40@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEO1bO3G3RqrEpjq5qIMwyJ2VG4czcyB/tw003wR6u+8y/Q+SADynLq2trYcdUyRCwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "teacher40@gmail.com"
                        },
                        new
                        {
                            Id = 41,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "5018a2a8-13f8-4681-9041-4355bfaf164e",
                            Email = "staff41@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name41",
                            Lastname = "LastName41",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff41@gmail.com",
                            NormalizedUserName = "staff41@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEG8vxo5CtX7suspHR1mSXvPKyPU0OUad8zpeWAH8rMAPW1c2KG6uVUPDNFhtGRpK4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff41@gmail.com"
                        },
                        new
                        {
                            Id = 42,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "906e52a4-e98d-4fd5-9775-961a157d465a",
                            Email = "staff42@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name42",
                            Lastname = "LastName42",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff42@gmail.com",
                            NormalizedUserName = "staff42@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIRQ+Y7JSPjb73tCPdcBbpeORkigqDSEtN0a0D1Bv1t19WVLbWKx2YzzLuYoSnhQ8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff42@gmail.com"
                        },
                        new
                        {
                            Id = 43,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "ed96ccb5-2b6d-4dcb-9bba-00fc2bf8f991",
                            Email = "staff43@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name43",
                            Lastname = "LastName43",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff43@gmail.com",
                            NormalizedUserName = "staff43@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELhOtBL91lR6okWCV2kx6WUhGPIRuN9utgSd82KJHXC/gIX5swETAvAA1pNV0k4dfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff43@gmail.com"
                        },
                        new
                        {
                            Id = 44,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "d079e19f-8495-4a47-bd2b-947d2f584c68",
                            Email = "staff44@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name44",
                            Lastname = "LastName44",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff44@gmail.com",
                            NormalizedUserName = "staff44@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENZXb6m9dbK08NG3rN3helB9ivRtZB5sCh7Hfb96N86Ec4AjNu5xji9XmEKLjSBM1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff44@gmail.com"
                        },
                        new
                        {
                            Id = 45,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "3625c748-80cc-4653-b80b-225f4e2f3f9a",
                            Email = "staff45@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name45",
                            Lastname = "LastName45",
                            LockoutEnabled = false,
                            NormalizedEmail = "staff45@gmail.com",
                            NormalizedUserName = "staff45@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEA3UPa34RFwkQwtUqWGZo9VjAKnvunXwgSzC3TiJlVDJm1OTEy1dSBQVrh6imetGcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff45@gmail.com"
                        },
                        new
                        {
                            Id = 46,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "48a5eea6-b256-4b51-a6a1-2dac5cf7df44",
                            Email = "admin46@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name46",
                            Lastname = "LastName46",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin46@gmail.com",
                            NormalizedUserName = "admin46@gmail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECs5QXStN5xItlJI7tWbq+iF3fPw2k0cBT/QTz39ZFQLSlsL3bwVARoAAdybhboRsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "admin46@gmail.com"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Category1"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Category2"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Category3"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Category4"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Category5"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Name = "Category6"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Name = "Category7"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            Name = "Category8"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            Name = "Category9"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            Name = "Category10"
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnddDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Yoga course number 1",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course1",
                            Price = 100.0,
                            StartDate = new DateTime(2023, 6, 26, 16, 16, 39, 284, DateTimeKind.Local).AddTicks(4746)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Yoga course number 2",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course2",
                            Price = 200.0,
                            StartDate = new DateTime(2023, 6, 26, 16, 16, 39, 284, DateTimeKind.Local).AddTicks(4788)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Yoga course number 3",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course3",
                            Price = 300.0,
                            StartDate = new DateTime(2023, 6, 26, 16, 16, 39, 284, DateTimeKind.Local).AddTicks(4795)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Yoga course number 4",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course4",
                            Price = 400.0,
                            StartDate = new DateTime(2023, 6, 26, 16, 16, 39, 284, DateTimeKind.Local).AddTicks(4801)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Description = "Yoga course number 5",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course5",
                            Price = 500.0,
                            StartDate = new DateTime(2023, 6, 26, 16, 16, 39, 284, DateTimeKind.Local).AddTicks(4807)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Description = "Yoga course number 6",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course6",
                            Price = 600.0,
                            StartDate = new DateTime(2023, 6, 26, 16, 16, 39, 284, DateTimeKind.Local).AddTicks(4814)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Description = "Yoga course number 7",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course7",
                            Price = 700.0,
                            StartDate = new DateTime(2023, 6, 26, 16, 16, 39, 284, DateTimeKind.Local).AddTicks(4820)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            Description = "Yoga course number 8",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course8",
                            Price = 800.0,
                            StartDate = new DateTime(2023, 6, 26, 16, 16, 39, 284, DateTimeKind.Local).AddTicks(4826)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Description = "Yoga course number 9",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course9",
                            Price = 900.0,
                            StartDate = new DateTime(2023, 6, 26, 16, 16, 39, 284, DateTimeKind.Local).AddTicks(4832)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            Description = "Yoga course number 10",
                            EnddDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            IsActive = true,
                            Name = "Course10",
                            Price = 1000.0,
                            StartDate = new DateTime(2023, 6, 26, 16, 16, 39, 284, DateTimeKind.Local).AddTicks(4840)
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Enrollment", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId", "YogaClassId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("MemberLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 2,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 3,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 4,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 5,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 6,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 7,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 8,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 9,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 10,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 11,
                            AppUserId = 11,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 12,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 13,
                            AppUserId = 13,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 14,
                            AppUserId = 14,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 15,
                            AppUserId = 15,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 16,
                            AppUserId = 16,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 17,
                            AppUserId = 17,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 18,
                            AppUserId = 18,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 19,
                            AppUserId = 19,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 20,
                            AppUserId = 20,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 21,
                            AppUserId = 21,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 22,
                            AppUserId = 22,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 23,
                            AppUserId = 23,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 24,
                            AppUserId = 24,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 25,
                            AppUserId = 25,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 26,
                            AppUserId = 26,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 27,
                            AppUserId = 27,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 28,
                            AppUserId = 28,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 29,
                            AppUserId = 29,
                            MemberLevel = 0
                        },
                        new
                        {
                            Id = 30,
                            AppUserId = 30,
                            MemberLevel = 0
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Schedule", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.HasKey("TimeSlotId", "YogaClassId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            TimeSlotId = 21,
                            YogaClassId = 1
                        },
                        new
                        {
                            TimeSlotId = 41,
                            YogaClassId = 1
                        },
                        new
                        {
                            TimeSlotId = 61,
                            YogaClassId = 1
                        },
                        new
                        {
                            TimeSlotId = 12,
                            YogaClassId = 2
                        },
                        new
                        {
                            TimeSlotId = 32,
                            YogaClassId = 2
                        },
                        new
                        {
                            TimeSlotId = 52,
                            YogaClassId = 2
                        },
                        new
                        {
                            TimeSlotId = 23,
                            YogaClassId = 3
                        },
                        new
                        {
                            TimeSlotId = 43,
                            YogaClassId = 3
                        },
                        new
                        {
                            TimeSlotId = 63,
                            YogaClassId = 3
                        },
                        new
                        {
                            TimeSlotId = 14,
                            YogaClassId = 4
                        },
                        new
                        {
                            TimeSlotId = 34,
                            YogaClassId = 4
                        },
                        new
                        {
                            TimeSlotId = 54,
                            YogaClassId = 4
                        },
                        new
                        {
                            TimeSlotId = 25,
                            YogaClassId = 5
                        },
                        new
                        {
                            TimeSlotId = 45,
                            YogaClassId = 5
                        },
                        new
                        {
                            TimeSlotId = 65,
                            YogaClassId = 5
                        },
                        new
                        {
                            TimeSlotId = 16,
                            YogaClassId = 6
                        },
                        new
                        {
                            TimeSlotId = 36,
                            YogaClassId = 6
                        },
                        new
                        {
                            TimeSlotId = 56,
                            YogaClassId = 6
                        },
                        new
                        {
                            TimeSlotId = 27,
                            YogaClassId = 7
                        },
                        new
                        {
                            TimeSlotId = 47,
                            YogaClassId = 7
                        },
                        new
                        {
                            TimeSlotId = 67,
                            YogaClassId = 7
                        },
                        new
                        {
                            TimeSlotId = 63,
                            YogaClassId = 8
                        },
                        new
                        {
                            TimeSlotId = 73,
                            YogaClassId = 8
                        },
                        new
                        {
                            TimeSlotId = 62,
                            YogaClassId = 9
                        },
                        new
                        {
                            TimeSlotId = 72,
                            YogaClassId = 9
                        },
                        new
                        {
                            TimeSlotId = 61,
                            YogaClassId = 10
                        },
                        new
                        {
                            TimeSlotId = 71,
                            YogaClassId = 10
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherProfileId")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherProfileId");

                    b.HasIndex("YogaClassId");

                    b.ToTable("TeacherEnrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("TeacherProfiles");

                    b.HasData(
                        new
                        {
                            Id = 31,
                            AppUserId = 31
                        },
                        new
                        {
                            Id = 32,
                            AppUserId = 32
                        },
                        new
                        {
                            Id = 33,
                            AppUserId = 33
                        },
                        new
                        {
                            Id = 34,
                            AppUserId = 34
                        },
                        new
                        {
                            Id = 35,
                            AppUserId = 35
                        },
                        new
                        {
                            Id = 36,
                            AppUserId = 36
                        },
                        new
                        {
                            Id = 37,
                            AppUserId = 37
                        },
                        new
                        {
                            Id = 38,
                            AppUserId = 38
                        },
                        new
                        {
                            Id = 39,
                            AppUserId = 39
                        },
                        new
                        {
                            Id = 40,
                            AppUserId = 40
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherSchedule", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("bit");

                    b.HasKey("TimeSlotId", "TeacherProfileId");

                    b.HasIndex("TeacherProfileId");

                    b.ToTable("TeacherSchedule");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Room")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 12,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 13,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 14,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 15,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 16,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 17,
                            DayOfWeek = 1,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 21,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 22,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 23,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 24,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 25,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 26,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 27,
                            DayOfWeek = 2,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 31,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 32,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 33,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 34,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 35,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 36,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 37,
                            DayOfWeek = 3,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 41,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 42,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 43,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 44,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 45,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 46,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 47,
                            DayOfWeek = 4,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 51,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 52,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 53,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 54,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 55,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 56,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 57,
                            DayOfWeek = 5,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 61,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 62,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 63,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 64,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 65,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 66,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 67,
                            DayOfWeek = 6,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 71,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 101,
                            StartTime = new DateTime(1, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 72,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 202,
                            StartTime = new DateTime(1, 1, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 73,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 303,
                            StartTime = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 74,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 404,
                            StartTime = new DateTime(1, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 75,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 505,
                            StartTime = new DateTime(1, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 76,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Room = 606,
                            StartTime = new DateTime(1, 1, 1, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 77,
                            DayOfWeek = 0,
                            EndTime = new DateTime(1, 1, 1, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Room = 707,
                            StartTime = new DateTime(1, 1, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<bool>("IsAdminWallet")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 2,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 3,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 4,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 5,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 6,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 7,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 8,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 9,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 10,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 11,
                            AppUserId = 11,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 12,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 13,
                            AppUserId = 13,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 14,
                            AppUserId = 14,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 15,
                            AppUserId = 15,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 16,
                            AppUserId = 16,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 17,
                            AppUserId = 17,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 18,
                            AppUserId = 18,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 19,
                            AppUserId = 19,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 20,
                            AppUserId = 20,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 21,
                            AppUserId = 21,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 22,
                            AppUserId = 22,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 23,
                            AppUserId = 23,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 24,
                            AppUserId = 24,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 25,
                            AppUserId = 25,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 26,
                            AppUserId = 26,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 27,
                            AppUserId = 27,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 28,
                            AppUserId = 28,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 29,
                            AppUserId = 29,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 30,
                            AppUserId = 30,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 31,
                            AppUserId = 31,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 32,
                            AppUserId = 32,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 33,
                            AppUserId = 33,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 34,
                            AppUserId = 34,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 35,
                            AppUserId = 35,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 36,
                            AppUserId = 36,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 37,
                            AppUserId = 37,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 38,
                            AppUserId = 38,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 39,
                            AppUserId = 39,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 40,
                            AppUserId = 40,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 41,
                            AppUserId = 41,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 42,
                            AppUserId = 42,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 43,
                            AppUserId = 43,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 44,
                            AppUserId = 44,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 45,
                            AppUserId = 45,
                            Balance = 0.0,
                            IsAdminWallet = false
                        },
                        new
                        {
                            Id = 46,
                            AppUserId = 46,
                            Balance = 0.0,
                            IsAdminWallet = true
                        });
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("YogaClassStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("YogaClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Name = "Class1",
                            Size = 19,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Name = "Class2",
                            Size = 18,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Name = "Class3",
                            Size = 17,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            Name = "Class4",
                            Size = 16,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            Name = "Class5",
                            Size = 15,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 6,
                            Name = "Class6",
                            Size = 14,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 7,
                            Name = "Class7",
                            Size = 13,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 8,
                            Name = "Class8",
                            Size = 12,
                            YogaClassStatus = 1
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 9,
                            Name = "Class9",
                            Size = 11,
                            YogaClassStatus = 2
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 10,
                            Name = "Class10",
                            Size = 10,
                            YogaClassStatus = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherProfileTimeSlot", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("AvailableSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", null)
                        .WithMany()
                        .HasForeignKey("AvailableTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlotYogaClass", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("TimeSlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", null)
                        .WithMany()
                        .HasForeignKey("YogaClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Enrollment", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Member", "Member")
                        .WithMany("Enrollments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("Enrollments")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("Member")
                        .HasForeignKey("YogaManagement.Domain.Models.Member", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Schedule", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany()
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSlot");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherEnrollment", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", "TeacherProfile")
                        .WithMany("TeacherEnrollments")
                        .HasForeignKey("TeacherProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.YogaClass", "YogaClass")
                        .WithMany("TeacherEnrollments")
                        .HasForeignKey("YogaClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherProfile");

                    b.Navigation("YogaClass");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("TeacherProfile")
                        .HasForeignKey("YogaManagement.Domain.Models.TeacherProfile", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherSchedule", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.TeacherProfile", "TeacherProfile")
                        .WithMany()
                        .HasForeignKey("TeacherProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogaManagement.Domain.Models.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherProfile");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Transaction", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.AppUser", "AppUser")
                        .WithOne("Wallet")
                        .HasForeignKey("YogaManagement.Domain.Models.Wallet", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.HasOne("YogaManagement.Domain.Models.Course", "Course")
                        .WithMany("YogaClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.AppUser", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("TeacherProfile");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Course", b =>
                {
                    b.Navigation("YogaClasses");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Member", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.TeacherProfile", b =>
                {
                    b.Navigation("TeacherEnrollments");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("YogaManagement.Domain.Models.YogaClass", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("TeacherEnrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
